---
title: "Geospatial with R"
subtitle: "Handling raster data with `terra`"
execute:
  freeze: auto
---

This is my practice sections following [R as GIS for Economists](https://tmieno2.github.io/R-as-GIS-for-Economists-Quarto/).

### Basics

```{r}
if (!require("pacman")) install.packages("pacman")
pacman::p_load(terra, raster, mapview, dplyr, sf, lubridate, downloader)

```

```{r}
(
  IA_cdl_2015 <- raster::raster("Data/IA_cdl_2015.tif")
)
```

```{r}
IA_cdl_2016 <- raster::raster("Data/IA_CDL_2016.tif")

#--- stack the two ---#
(
  IA_cdl_stack <- raster::stack(IA_cdl_2015, IA_cdl_2016)
)
```

```{r}
#| eval: false

# I am not evaluating this cell because it takes quite some time to execute.
#--- stack the two ---#
IA_cdl_brick <- brick(IA_cdl_stack)

#--- or this works as well ---#
# IA_cdl_brick <- brick(IA_cdl_2015, IA_cdl_2016)

#--- take a look ---#
IA_cdl_brick

```

```{r}
#--- convert to a SpatRaster ---#
IA_cdl_2015_sr <- terra::rast(IA_cdl_2015)

#--- convert to a SpatRaster ---#
IA_cdl_stack_sr <- terra::rast(IA_cdl_stack)

#--- take a look ---#
IA_cdl_2015_sr

```

```{r}
# create a single-layer from multiple single-layer
IA_cdl_2016_sr <- terra::rast(IA_cdl_2016)

# concatenate
(
    IA_cdl_ml_sr <- c(IA_cdl_2015_sr, IA_cdl_2016_sr)
)

```

```{r}
IA_cdl_stack_sr %>% raster::raster()
#  %>% raster::stack()
#  %>% raster::brick() 

```

```{r}
#--- Illinois county boundary ---#
(
  IL_county <- 
    tigris::counties(
      state = "Illinois", 
      progress_bar = FALSE
    ) %>%
    dplyr::select(STATEFP, COUNTYFP)
)

```

```{r}
(
    IL_county_sv <- terra::vect(IL_county)
)

```


```{r}
(
    IA_cdl_2015_sr <- terra::rast("Data/IA_cdl_2015.tif")
)

```

```{r}
#--- the list of path to the files ---#
files_list <- c("Data/IA_cdl_2015.tif", "Data/IA_CDL_2016.tif")

#--- read the two at the same time ---#
(
  multi_layer_sr <- terra::rast(files_list)
)

```

```{r}
terra::crs(IA_cdl_2015_sr)

```

```{r}
# index
IA_cdl_stack_sr[[2]]

```

```{r}
values_from_rs <- terra::values(IA_cdl_stack_sr)

head(values_from_rs)

```

```{r}
plot(IA_cdl_2015_sr)

```

```{r}
if (!require("pacman")) install.packages("pacman")
pacman::p_load(terra, tidyterra, raster, exactextractr, sf, dplyr, tidyr, data.table, prism, tictoc, tigris)

```

```{r}
#--- set the path to the folder to which you save the downloaded PRISM data ---#
# This code sets the current working directory as the designated folder
options(prism.path = "Data")

#--- download PRISM precipitation data ---#
prism::get_prism_dailys(
  type = "tmax",
  date = "2018-07-01",
  keepZip = FALSE
)

#--- the file name of the PRISM data just downloaded ---#
prism_file <- "Data/PRISM_tmax_stable_4kmD2_20180701_bil/PRISM_tmax_stable_4kmD2_20180701_bil.bil"

#--- read in the prism data ---#
prism_tmax_0701_sr <- terra::rast(prism_file)


#--- Kansas boundary (sf) ---#
KS_county_sf <-
  #--- get Kansas county boundary ---
  tigris::counties(state = "Kansas", cb = TRUE) %>%
  #--- sp to sf ---#
  sf::st_as_sf() %>%
  #--- transform using the CRS of the PRISM tmax data  ---#
  sf::st_transform(terra::crs(prism_tmax_0701_sr))
```

```{r}
# terra::(SpatRaster, sf)

prism_tmax_0701_KS_sr <- 
  terra::crop(
    prism_tmax_0701_sr,
    KS_county_sf
  )

library(tidyverse)

ggplot() +
  geom_spatraster(data = prism_tmax_0701_KS_sr) +
  geom_sf(data = KS_county_sf, fill = NA, color = "blue") +
  scale_fill_whitebox_c(
    name = "tmax",
    palette = "muted",
    labels = scales::label_number(suffix = "o"),
    n.breaks = 12,
    guide = guide_legend(reverse = TRUE)
  ) +
  theme_void()
```

```{r}
#--- download PRISM precipitation data ---#
prism::get_prism_dailys(
  type = "tmax",
  date = "2018-07-02",
  keepZip = FALSE
)

#--- the file name of the PRISM data just downloaded ---#
prism_file <- "Data/PRISM_tmax_stable_4kmD2_20180702_bil/PRISM_tmax_stable_4kmD2_20180702_bil.bil"

#--- read in the prism data and crop it to Kansas state border ---#
prism_tmax_0702_KS_sr <-
  terra::rast(prism_file) %>%
  terra::crop(KS_county_sf)

#--- read in the KS points data ---#
(
  KS_wells <- readRDS("Data/Chap_5_wells_KS.rds")
)

ggplot()  +
  geom_sf(data = KS_county_sf, fill = NA) +
  geom_sf(data = KS_wells, size = 0.05) +
  theme_void()

```

```{r}
# terra:extract(raster, points)

tmax_from_prism <- terra::extract(prism_tmax_0701_KS_sr, KS_wells)

head(tmax_from_prism)

KS_wells$tmax_07_01 <- tmax_from_prism[,-1]

```

```{r}
#--- create a multi-layer SpatRaster ---#
prism_tmax_stack <- c(prism_tmax_0701_KS_sr, prism_tmax_0702_KS_sr)

#--- extract tmax values ---#
tmax_from_prism_stack <- terra::extract(prism_tmax_stack, KS_wells)

#--- take a look ---#
head(tmax_from_prism_stack)

```

```{r}
tmax_by_county <- terra::extract(prism_tmax_0701_KS_sr, KS_county_sf)

class(tmax_by_county)

head(tmax_by_county)

```


```{r}
#--- get mean tmax ---#
mean_tmax <-
  tmax_by_county %>%
  group_by(ID) %>%
  summarize(tmax = mean(PRISM_tmax_stable_4kmD2_20180701_bil))

(
  KS_county_sf <-
    #--- back to sf ---#
    KS_county_sf %>%
    #--- define ID ---#
    mutate(ID := seq_len(nrow(.))) %>%
    #--- merge by ID ---#
    left_join(., mean_tmax, by = "ID")
)

```

```{r}
tmax_by_county <- 
  terra::extract(
    prism_tmax_0701_KS_sr,
    KS_county_sf,
    fun = mean
  )
head(tmax_by_county)
```

```{r}
# exactextractr::exact_extract(raster, polygons sf, include_cols = list of vars)

tmax_by_county <- 
  exactextractr::exact_extract(
    prism_tmax_0701_KS_sr,
    KS_county_sf,
    include_cols = "COUNTYFP",
    progress = FALSE
  )

  tmax_by_county[1:2] %>% lapply(function(x) head(x))

```

```{r}
tmax_combined <- tmax_by_county %>% 
  dplyr::bind_rows() %>% 
  tibble::as_tibble()

```