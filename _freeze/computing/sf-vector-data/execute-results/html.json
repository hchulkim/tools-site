{
  "hash": "853ba03884e2de6791c479a78c2aeaac",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Geospatial with R\"\nsubtitle: \"Handling vector data with `sf`\"\nexecute:\n  freeze: auto\n---\n\n\n\n\nThis is my practice sections following [R as GIS for Economists](https://tmieno2.github.io/R-as-GIS-for-Economists-Quarto/).\n\n### Basics\n\nLoad the packages:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n  sf, # vector data operations\n  tidyverse, # data wrangling\n  data.table, # data wrangling\n  tmap, # make maps\n  mapview, # create an interactive map\n  patchwork, # arranging maps\n  rmapshaper\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#--- a dataset that comes with the sf package ---#\nnc <- sf::st_read(system.file(\"shape/nc.shp\", package = \"sf\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `nc' from data source \n  `/home/himakun/R/x86_64-pc-linux-gnu-library/4.4/sf/shape/nc.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 100 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = nc) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](sf-vector-data_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(nc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -81.74107 ymin: 36.07282 xmax: -75.77316 ymax: 36.58965\nGeodetic CRS:  NAD27\n   AREA PERIMETER CNTY_ CNTY_ID        NAME  FIPS FIPSNO CRESS_ID BIR74 SID74\n1 0.114     1.442  1825    1825        Ashe 37009  37009        5  1091     1\n2 0.061     1.231  1827    1827   Alleghany 37005  37005        3   487     0\n3 0.143     1.630  1828    1828       Surry 37171  37171       86  3188     5\n4 0.070     2.968  1831    1831   Currituck 37053  37053       27   508     1\n5 0.153     2.206  1832    1832 Northampton 37131  37131       66  1421     9\n6 0.097     1.670  1833    1833    Hertford 37091  37091       46  1452     7\n  NWBIR74 BIR79 SID79 NWBIR79                       geometry\n1      10  1364     0      19 MULTIPOLYGON (((-81.47276 3...\n2      10   542     3      12 MULTIPOLYGON (((-81.23989 3...\n3     208  3616     6     260 MULTIPOLYGON (((-80.45634 3...\n4     123   830     2     145 MULTIPOLYGON (((-76.00897 3...\n5    1066  1606     3    1197 MULTIPOLYGON (((-77.21767 3...\n6     954  1838     5    1237 MULTIPOLYGON (((-76.74506 3...\n```\n\n\n:::\n:::\n\n\n\n\n`sfg`: `LINESTRING`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#--- collection of points in a matrix form ---#\ns1 <- rbind(c(2, 3), c(3, 4), c(3, 5), c(1, 5))\n\n#--- see what s1 looks like ---#\ns1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    2    3\n[2,]    3    4\n[3,]    3    5\n[4,]    1    5\n```\n\n\n:::\n\n```{.r .cell-code}\n#--- create a \"LINESTRING\" ---#\na_linestring <- sf::st_linestring(s1)\n\n#--- check the class ---#\nclass(a_linestring)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"XY\"         \"LINESTRING\" \"sfg\"       \n```\n\n\n:::\n:::\n\n\n\n\n`sfg`: `POLYGON`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#--- a hole within p1 ---#\np1 <- rbind(c(0, 0), c(3, 0), c(3, 2), c(2, 5), c(1, 3), c(0, 0))\np2 <- rbind(c(1, 1), c(1, 2), c(2, 2), c(1, 1))\n\n#--- create a polygon with hole ---#\na_plygon_with_a_hole <- sf::st_polygon(list(p1, p2))\n\nplot(a_plygon_with_a_hole)\n```\n\n::: {.cell-output-display}\n![](sf-vector-data_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\nCreating `sfc` object or `sf` object:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#--- create an sfc ---#\nsfc_ex <- sf::st_sfc(list(a_linestring, a_plygon_with_a_hole))\n\n#--- create a data.frame ---#\ndf_ex <- data.frame(name = c(\"A\", \"B\"))\n\n#--- add the sfc as a column ---#\ndf_ex$geometry <- sfc_ex\n\n#--- take a look ---#\ndf_ex\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  name                       geometry\n1    A LINESTRING (2 3, 3 4, 3 5, ...\n2    B POLYGON ((0 0, 3 0, 3 2, 2 ...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#--- let R recognize the data frame as sf ---#\nsf_ex <- sf::st_as_sf(df_ex)\n\n#--- see what it looks like ---#\nsf_ex\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 2 features and 1 field\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 0 ymin: 0 xmax: 3 ymax: 5\nCRS:           NA\n  name                       geometry\n1    A LINESTRING (2 3, 3 4, 3 5, ...\n2    B POLYGON ((0 0, 3 0, 3 2, 2 ...\n```\n\n\n:::\n:::\n\n\n\n\nRead shapefile:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#--- read a NE county boundary shapefile ---#\nnc_loaded <- sf::st_read(\"Data/nc.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `nc' from data source \n  `/home/himakun/Documents/tools/computing/Data/nc.shp' using driver `ESRI Shapefile'\nSimple feature collection with 100 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\n```\n\n\n:::\n:::\n\n\n\n\nProjection with different CRS:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsf::st_crs(nc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: NAD27 \n  wkt:\nGEOGCRS[\"NAD27\",\n    DATUM[\"North American Datum 1927\",\n        ELLIPSOID[\"Clarke 1866\",6378206.4,294.978698213898,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4267]]\n```\n\n\n:::\n:::\n\n\n\n\nChange the CRS projection:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#--- transform ---#\nnc_wgs84 <- sf::st_transform(nc, 4326)\n\n#--- check if the transformation was successful ---#\nsf::st_crs(nc_wgs84)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n\n```{.r .cell-code}\n#--- transform ---#\nnc_utm17N <- sf::st_transform(nc_wgs84, 26917)\n\n#--- check if the transformation was successful ---#\nsf::st_crs(nc_utm17N)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:26917 \n  wkt:\nPROJCRS[\"NAD83 / UTM zone 17N\",\n    BASEGEOGCRS[\"NAD83\",\n        DATUM[\"North American Datum 1983\",\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4269]],\n    CONVERSION[\"UTM zone 17N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",-81,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"North America - between 84°W and 78°W - onshore and offshore. Canada - Nunavut; Ontario; Quebec. United States (USA) - Florida; Georgia; Kentucky; Maryland; Michigan; New York; North Carolina; Ohio; Pennsylvania; South Carolina; Tennessee; Virginia; West Virginia.\"],\n        BBOX[23.81,-84,84,-78]],\n    ID[\"EPSG\",26917]]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#--- transform ---#\nnc_utm17N_2 <- sf::st_transform(nc_wgs84, sf::st_crs(nc_utm17N))\n\n#--- check if the transformation was successful ---#\nsf::st_crs(nc_utm17N_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:26917 \n  wkt:\nPROJCRS[\"NAD83 / UTM zone 17N\",\n    BASEGEOGCRS[\"NAD83\",\n        DATUM[\"North American Datum 1983\",\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4269]],\n    CONVERSION[\"UTM zone 17N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",-81,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"North America - between 84°W and 78°W - onshore and offshore. Canada - Nunavut; Ontario; Quebec. United States (USA) - Florida; Georgia; Kentucky; Maryland; Michigan; New York; North Carolina; Ohio; Pennsylvania; South Carolina; Tennessee; Virginia; West Virginia.\"],\n        BBOX[23.81,-84,84,-78]],\n    ID[\"EPSG\",26917]]\n```\n\n\n:::\n:::\n\n\n\n\nTurning dataframe into sf object\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#--- read irrigation well registration data ---#\n(\n  wells <- readRDS(\"Data/well_registration.rds\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <wellid>\n        wellid ownerid        nrdname acres  regdate section     longdd\n         <int>   <int>         <char> <num>   <char>   <int>      <num>\n     1:      2  106106 Central Platte   160 12/30/55       3  -99.58401\n     2:      3   14133   South Platte    46  4/29/31       8 -102.62495\n     3:      4   14133   South Platte    46  4/29/31       8 -102.62495\n     4:      5   14133   South Platte    46  4/29/31       8 -102.62495\n     5:      6   15837 Central Platte   160  8/29/32      20  -99.62580\n    ---                                                                \n105818: 244568  135045 Upper Big Blue    NA  8/26/16      30  -97.58872\n105819: 244569  105428    Little Blue    NA  8/26/16      24  -97.60752\n105820: 244570  135045 Upper Big Blue    NA  8/26/16      30  -97.58294\n105821: 244571  135045 Upper Big Blue    NA  8/26/16      25  -97.59775\n105822: 244572  105428    Little Blue    NA  8/26/16      15  -97.64086\n           latdd\n           <num>\n     1: 40.69825\n     2: 41.11699\n     3: 41.11699\n     4: 41.11699\n     5: 40.73268\n    ---         \n105818: 40.89017\n105819: 40.13257\n105820: 40.88722\n105821: 40.89639\n105822: 40.13380\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#--- recognize it as an sf ---#\nwells_sf <- sf::st_as_sf(wells, coords = c(\"longdd\", \"latdd\")) %>% \n  st_set_crs(4269)\n\n#--- take a look at the data ---#\nhead(wells_sf[, 1:5])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -102.6249 ymin: 40.69824 xmax: -99.58401 ymax: 41.11699\nGeodetic CRS:  NAD83\n  wellid ownerid        nrdname acres  regdate                   geometry\n1      2  106106 Central Platte   160 12/30/55 POINT (-99.58401 40.69825)\n2      3   14133   South Platte    46  4/29/31 POINT (-102.6249 41.11699)\n3      4   14133   South Platte    46  4/29/31 POINT (-102.6249 41.11699)\n4      5   14133   South Platte    46  4/29/31 POINT (-102.6249 41.11699)\n5      6   15837 Central Platte   160  8/29/32  POINT (-99.6258 40.73268)\n6      7   90248 Central Platte   120  2/15/35 POINT (-99.64524 40.73164)\n```\n\n\n:::\n:::\n\n\n\n\nConversion to and from `sp` objects\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#--- conversion ---#\nwells_sp <- as(wells_sf, \"Spatial\")\n\n#--- check the class ---#\nclass(wells_sp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"SpatialPointsDataFrame\"\nattr(,\"package\")\n[1] \"sp\"\n```\n\n\n:::\n\n```{.r .cell-code}\n#--- revert back to sf ---#\nwells_sf <- sf::st_as_sf(wells_sp)\n\n#--- check the class ---#\nclass(wells_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n\nReverting `sf` object back into dataframe\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#--- remove geometry ---#\nwells_no_longer_sf <- sf::st_drop_geometry(wells_sf)\n\n#--- take a look ---#\nhead(wells_no_longer_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  wellid ownerid        nrdname acres  regdate section\n1      2  106106 Central Platte   160 12/30/55       3\n2      3   14133   South Platte    46  4/29/31       8\n3      4   14133   South Platte    46  4/29/31       8\n4      5   14133   South Platte    46  4/29/31       8\n5      6   15837 Central Platte   160  8/29/32      20\n6      7   90248 Central Platte   120  2/15/35      19\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#--- read wells location data ---#\nurnrd_wells_sf <-\n  readRDS(\"Data/urnrd_wells.rds\") %>%\n  #--- project to UTM 14N WGS 84 ---#\n  sf::st_transform(32614)\n\n#--- create a one-mile buffer around the wells ---#\nwells_buffer <- sf::st_buffer(urnrd_wells_sf, dist = 1600)\n\nhead(wells_buffer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 251786.6 ymin: 4483187 xmax: 301596 ymax: 4499464\nProjected CRS: WGS 84 / UTM zone 14N\n  wellid ownerid          nrdname acres regdate section\n1     79   98705 Upper Republican   400 12/9/40       5\n2    109  115260 Upper Republican    80 3/11/41      20\n3    161  115260 Upper Republican    50  3/8/43      17\n4    162   41350 Upper Republican   140 3/23/43      28\n5    164  105393 Upper Republican    90  7/6/43      12\n6    166   51341 Upper Republican   110 8/31/43      18\n                        geometry\n1 POLYGON ((277371.9 4497864,...\n2 POLYGON ((256979.6 4484787,...\n3 POLYGON ((256993.1 4485173,...\n4 POLYGON ((258354.5 4492808,...\n5 POLYGON ((301596 4485998, 3...\n6 POLYGON ((254986.6 4485670,...\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = urnrd_wells_sf, size = 0.6, color = \"red\") +\n  geom_sf(data = wells_buffer, fill = NA) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](sf-vector-data_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nNE_counties <-\n  readRDS(\"Data/NE_county_borders.rds\") %>%\n  dplyr::filter(NAME %in% c(\"Perkins\", \"Dundy\", \"Chase\")) %>%\n  sf::st_transform(32614)\n\n#--- generate area by polygon ---#\n(\n  NE_counties <- dplyr::mutate(NE_counties, area = st_area(NE_counties))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 3 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 239494.1 ymin: 4430632 xmax: 310778.1 ymax: 4543676\nProjected CRS: WGS 84 / UTM zone 14N\n  STATEFP COUNTYFP COUNTYNS       AFFGEOID GEOID    NAME LSAD      ALAND\n1      31      135 00835889 0500000US31135 31135 Perkins   06 2287828025\n2      31      029 00835836 0500000US31029 31029   Chase   06 2316533447\n3      31      057 00835850 0500000US31057 31057   Dundy   06 2381956151\n   AWATER                       geometry             area\n1 2840176 MULTIPOLYGON (((243340.2 45... 2302174854 [m^2]\n2 7978172 MULTIPOLYGON (((241201.4 44... 2316908196 [m^2]\n3 3046331 MULTIPOLYGON (((240811.3 44... 2389890530 [m^2]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#--- create centroids ---#\n(\n  NE_centroids <- sf::st_centroid(NE_counties)\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 3 features and 10 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 271156.7 ymin: 4450826 xmax: 276594.1 ymax: 4525635\nProjected CRS: WGS 84 / UTM zone 14N\n  STATEFP COUNTYFP COUNTYNS       AFFGEOID GEOID    NAME LSAD      ALAND\n1      31      135 00835889 0500000US31135 31135 Perkins   06 2287828025\n2      31      029 00835836 0500000US31029 31029   Chase   06 2316533447\n3      31      057 00835850 0500000US31057 31057   Dundy   06 2381956151\n   AWATER                 geometry             area\n1 2840176 POINT (276594.1 4525635) 2302174854 [m^2]\n2 7978172 POINT (271469.9 4489429) 2316908196 [m^2]\n3 3046331 POINT (271156.7 4450826) 2389890530 [m^2]\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = NE_counties) +\n  geom_sf_text(data = NE_centroids, aes(label = NAME)) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](sf-vector-data_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nIL_counties <- sf::st_read(\"Data/IL_county_detailed.geojson\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `IL_county_detailed' from data source \n  `/home/himakun/Documents/tools/computing/Data/IL_county_detailed.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 102 features and 61 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -91.51309 ymin: 36.9703 xmax: -87.4952 ymax: 42.50849\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nIL_counties_mssimplified <- rmapshaper::ms_simplify(IL_counties, keep = 0.01)\n\nCook <- filter(IL_counties, NAME == \"Cook County\")\n\nCook_simplify <- sf::st_simplify(Cook, dTolerance = 1000)\n\nggplot() +\n  geom_sf(data = Cook_simplify) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](sf-vector-data_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n\n### Spatial Interactions of Vector Data: Subsetting and Joining\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#--- create points ---#\npoint_1 <- sf::st_point(c(2, 2))\npoint_2 <- sf::st_point(c(1, 1))\npoint_3 <- sf::st_point(c(1, 3))\n\n#--- combine the points to make a single  sf of points ---#\n(\npoints <- \n  list(point_1, point_2, point_3) %>% \n  sf::st_sfc() %>% \n  sf::st_as_sf() %>% \n  dplyr::mutate(point_name = c(\"point 1\", \"point 2\", \"point 3\"))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 3 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 1 ymin: 1 xmax: 2 ymax: 3\nCRS:           NA\n            x point_name\n1 POINT (2 2)    point 1\n2 POINT (1 1)    point 2\n3 POINT (1 3)    point 3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#--- create points ---#\nline_1 <- sf::st_linestring(rbind(c(0, 0), c(2.5, 0.5)))\nline_2 <- sf::st_linestring(rbind(c(1.5, 0.5), c(2.5, 2)))\n\n#--- combine the points to make a single  sf of points ---#\n(\nlines <- \n  list(line_1, line_2) %>% \n  sf::st_sfc() %>% \n  sf::st_as_sf() %>% \n  dplyr::mutate(line_name = c(\"line 1\", \"line 2\"))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 2 features and 1 field\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 0 ymin: 0 xmax: 2.5 ymax: 2\nCRS:           NA\n                            x line_name\n1   LINESTRING (0 0, 2.5 0.5)    line 1\n2 LINESTRING (1.5 0.5, 2.5 2)    line 2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#--- create polygons ---#\npolygon_1 <- sf::st_polygon(list(\n  rbind(c(0, 0), c(2, 0), c(2, 2), c(0, 2), c(0, 0)) \n))\n\npolygon_2 <- sf::st_polygon(list(\n  rbind(c(0.5, 1.5), c(0.5, 3.5), c(2.5, 3.5), c(2.5, 1.5), c(0.5, 1.5)) \n))\n\npolygon_3 <- sf::st_polygon(list(\n  rbind(c(0.5, 2.5), c(0.5, 3.2), c(2.3, 3.2), c(2, 2), c(0.5, 2.5)) \n))\n\n#--- combine the polygons to make an sf of polygons ---#\n(\npolygons <- \n  list(polygon_1, polygon_2, polygon_3) %>% \n  sf::st_sfc() %>% \n  sf::st_as_sf() %>% \n  dplyr::mutate(polygon_name = c(\"polygon 1\", \"polygon 2\", \"polygon 3\"))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 3 features and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 0 ymin: 0 xmax: 2.5 ymax: 3.5\nCRS:           NA\n                               x polygon_name\n1 POLYGON ((0 0, 2 0, 2 2, 0 ...    polygon 1\n2 POLYGON ((0.5 1.5, 0.5 3.5,...    polygon 2\n3 POLYGON ((0.5 2.5, 0.5 3.2,...    polygon 3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = polygons, aes(fill = polygon_name), alpha = 0.3) +\n  scale_fill_discrete(name = \"Polygons\") +\n  geom_sf(data = lines, aes(color = line_name)) +\n  scale_color_discrete(name = \"Lines\") + \n  geom_sf(data = points, aes(shape = point_name), size = 4) +\n  scale_shape_discrete(name = \"Points\")  \n```\n\n::: {.cell-output-display}\n![](sf-vector-data_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsf::st_intersects(points, polygons)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSparse geometry binary predicate list of length 3, where the predicate\nwas `intersects'\n 1: 1, 2, 3\n 2: 1\n 3: 2, 3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(38424738)\n\npoints_set_1 <-\n  lapply(1:5, function(x) sf::st_point(runif(2))) %>% \n  sf::st_sfc() %>% sf::st_as_sf() %>% \n  dplyr::mutate(id = 1:nrow(.))\n\npoints_set_2 <-\n  lapply(1:5, function(x) sf::st_point(runif(2))) %>% \n  sf::st_sfc() %>% sf::st_as_sf() %>% \n  dplyr::mutate(id = 1:nrow(.))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsf::st_is_within_distance(points_set_1, points_set_2, dist = 0.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSparse geometry binary predicate list of length 5, where the predicate\nwas `is_within_distance'\n 1: 1\n 2: (empty)\n 3: (empty)\n 4: (empty)\n 5: 3\n```\n\n\n:::\n:::",
    "supporting": [
      "sf-vector-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}