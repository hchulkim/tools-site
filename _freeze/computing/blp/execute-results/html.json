{
  "hash": "ab97dc9c61d879075560174f0ffa8d56",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"BLP Demystified: From Basics to Brain-Busting Models!\"\nauthor: \"Hyoungchul Kim\"\nengine: julia\nexecute: \n  freeze: auto\nformat: \n  html:\n    toc: false\n    number-sections: true\n    code-overflow: wrap\nbibliography: references.bib\n---\n\n\n\n\n\nInstall necessary julia packages for later computation:\n\n\n\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\n# You might need these commented codes to install packages\n# using Pkg\n# Pkg.add([\"DataFrames\", \"CSV\", \"GLM\", \"Statistics\", \"LinearAlgebra\", \"Distributions\", \"NLopt\", \"FixedEffectModels\", \"RegressionTables\", \"DataFramesMeta\", \"Random\", \"StatsModels\", \"Optim\", \"StatsBase\"])\n```\n:::\n\n\n\n\n\n\n\n# BLP\n\nThis exercise estimates the demand-side BLP model.\n\n## Motivation\n\nWhy do this? Demand estimation is very important in IO literature because measuring market power is important in IO. How do we quantify market power? Usually we use markup as the measure. But it is hard to directly calculate markup because it depends on the cost function of the firm which is not observed. But IO theory shows that we can actually get the markup using demand elasticity. Thus estimating demand is important. \n\n## Basic: @mcfadden74 style logit model\n\n### Model setup\n\nWe will first estimate a basic logit model with no unobserved demand shifters and no random coefficents. But let's just talk bit about the background of this discrete choice model. Note that most of it is from @train. \n\nEven before @mcfadden74, there has been a long history of the development of the logit model. But @mcfadden74 provides a complete, well-defined econometric model that is consistent with the utility maximization behavior of individuals.\n\n\nIndividual's ($i$) utility maximizing behavior (indirect utility) can be specified as follows:\n\n$$\nu_{ij} = \\underbrace{x_j \\beta + \\alpha p_j}_{\\delta_j} + \\varepsilon_{ij}\n$$\n\nwhere mean utility of outside option is normalized to zero. Also, idiosyncratic shock (i.i.d) follows Type 1 Extreme Value distribution (T1EV). We also assume there are $0, \\ldots, J$ products (denote $0$ as the outside option) where one option is outside option. We can think of $\\delta_j$ as the mean utility from the product $j$. This is because in this parameterization, $\\delta_j$ does not depend on $i$.\n\nNow let's do some math to derive the logit choice probabilities. One benefit about logit model is that we can get a close-form solution. We are going to compute the probability of individuals choosing product $j$ given $p_j$, and $x_j$.\n\n\\begin{align}\n  P (u_{ij} \\geq \\forall_{j' \\neq j} u_{ij'} \\mid x_j, p_j) &= P (x_j \\beta + \\alpha p_j + \\varepsilon_{ij} \\geq \\forall_{j' \\neq j} x_{j'}\\beta + \\alpha p_{j'} + \\varepsilon_{ij'} \\mid x_j, p_j) \\\\\n  &= P ( \\varepsilon_{ij'} \\leq \\varepsilon_{ij} + \\delta_j - \\delta_{j'} \\, \\forall j' \\neq j).\n\\end{align}\n\nIf we assume that $\\varepsilon_{ij}$ is given, we can think of the last term as the cumulative distribution of the T1EV where $F(\\varepsilon_{ij}) = e^{-e^{- \\varepsilon_{ij}}}$. Since we assumed i.i.d., we can express the last term as the product of the individual cumulative distributions (For brevity, we will now denote the conditional logit choice probability as $P_{ij}$):\n\n$$\n  P_{ij} \\mid \\varepsilon_{ij} = \\prod_{j' \\neq j} e^{ - e^{-(\\varepsilon_{ij} + \\delta_j - \\delta_{j'})}}.\n$$\n\nSince $\\varepsilon_{ij}$ is not given, we need o integrate it over density of $\\varepsilon_{ij}$:\n\n$$\n  P_{ij} = \\int \\left(\\prod_{j' \\neq j} e^{ - e^{-(\\varepsilon_{ij} + \\delta_j - \\delta_{j'})}} \\right) e^{- \\varepsilon_{ij}} e^{-e^{\\varepsilon_{ij}}} d \\varepsilon_{ij}.\n$$\n\nNow let's get this into a closed-form expression:\n\nAs a result, we can get the closed-form expression:\n\n$$\n  P_{ij} = \\frac{e^{\\delta_{ij}}}{\\sum_{j'} e^{\\delta_{ij'}}}\n$$\n\nThis could be understood as the *predicted share* function given the fixed values of the parameters.\n\nNote that this is a very simple model because we are not assuming any unobserved product demand shifters that could be affected the utility gained from the product. In fact, we are assuming that econometricians can fully observe all the necessary variables that constructs the mean utility. Thus there is not much econometrics involved. You can just get the parameters as follows:\n\n1. Assuming you have the data on market share, you can use it to match it to $P_{ij} \\cdot M$ where $M$is the total market size.\n\n2. Then since we will get $J$ equations using $J$ market share, we can do simple algebra to get the mean utility $\\delta_j$.\n\n3. Then you can do some nonlinear least squares that minimize the sum of the differences between oberved and predicted shares of all products. This will get you the parameters that best fit the data.\n\n### Adding unobserved demand shifters\n\nWe can add the additional unobserved variables $\\xi_j$ which can be thought of as some demand shifter for product $j$. This allows the model to be more flexible to incorporate the realistic situation where econometrician might not be able to observe some components that might be affecting the utility of getting some product. Thus most of what we did above does not change much. The only problem would be understanding the nature of this unobserved terms with other main parameters of interest. If there is endogeneity, we would need some IV to estimate the parameter. In this section, we will do both cases (OLS, IV).\n\n### Computation (Following @berry1994)\n\nSo how can we retrieve the parameters of interest? Naive way to think about it would be doing some **nonlinear least squares** where you minimize the sum of differences between predicted share and observed shares of all products. The problem is that this directy way is implausible: You would need to know the $\\xi_j$. Since this is unobservable, it is problematic.\n\n**This is where @berry1994 comes in.** He introduces this clever two steps estimation process.\n\n**Step 1: Inversion**\n\nNotation: Let $\\hat{s}_j (\\delta)$ be predicted shares and let $s_j$ be observed shares.[^1]\n\nThen you can use the system of equations from matching actual to predicted shares and invert them to get the mean utility. For this simple case, we can get the following equations:\n\n$$\n  \\delta_j = \\log s_j - \\log \\hat{s}_0, \\quad j = 1, \\ldots, J.\n$$\n\nSo this inversion gets us the value of the mean utility. Then we have the second step.\n\n**Step 2: IV estimation**\n\nBy definition, we have $\\delta_j = x_j \\beta + \\alpha p_j + \\xi_j$. So we can do the regression to retrieve the parameters. I put IV, but this could be just OLS if you can assume the unobserved term is uncorrelated with the price.\n\n[^1]: You might have already noticed, but I kind of use variables without subscript as the vector of the variables. For example, $\\delta$ is just $(\\delta_1, \\ldots, \\delta_J).$\n\n### Coding (with `Julia`)\n\nFinally we will do some coding to get the result we just talked about.\n\n\n\n\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\nusing FixedEffectModels, DataFrames, CSV, RegressionTables \n\n# read in the data\notc = CSV.read(\"data/otc.csv\", DataFrame)\n\n# Run regressions\nols1 = reg(otc, @formula(ln_mkt_share_diff ~ price + promotion)) \nols2 = reg(otc, @formula(ln_mkt_share_diff ~ price + promotion + fe(product)))\nols3 = reg(otc, @formula(ln_mkt_share_diff ~ price + promotion + fe(product) + fe(store)))\niv1 = reg(otc, @formula(ln_mkt_share_diff ~ (price ~ cost) + promotion))\niv2 = reg(otc, @formula(ln_mkt_share_diff ~ (price ~ cost) + promotion + fe(product)))\n\nregtable(ols1, ols2, ols3, iv1, iv2, order = [\"price\"], drop = [\"(Intercept)\"], regression_statistics = [FStatIV, Nobs, R2],\n  labels = Dict(\n    \"price\" => \"Price\",\n    \"promotion\" => \"Promotion\",\n    \"ln_mkt_share_diff\" => \"Log Mkt share difference\"\n  ))\n## Some R codes that I followed\n\n# m1 <- lm(ln_mkt_share_diff ~ price + promotion , data = otc)\n# m2 <- lm(ln_mkt_share_diff ~ price + promotion + factor(product), data = otc)\n# m3 <- lm(ln_mkt_share_diff ~ price + promotion + factor(product) + factor(store), data = otc)\n# m4 <- ivreg(ln_mkt_share_diff ~ price + promotion | . - price + cost, data = otc)\n# m5 <- ivreg(ln_mkt_share_diff ~ price + promotion + factor(product) | . - price + cost, data = otc)\n# stargazer(m1, m2, m3, m4, m5, \n#           omit = c(\"product\", \"store\"),\n#           type = \"text\")\n\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n\n-----------------------------------------------------------------------------\n                                        Log Mkt share difference             \n                          ---------------------------------------------------\n                              (1)        (2)       (3)         (4)        (5)\n-----------------------------------------------------------------------------\nPrice                       0.020   -0.189**   -0.145*    0.069***      0.169\n                          (0.014)    (0.059)   (0.059)     (0.015)    (0.115)\nPromotion                   0.121     0.187*   0.201**       0.149   0.308***\n                          (0.093)    (0.074)   (0.073)     (0.093)    (0.082)\n-----------------------------------------------------------------------------\nproduct Fixed Effects                    Yes       Yes                    Yes\nstore Fixed Effects                                Yes                       \n-----------------------------------------------------------------------------\nEstimator                     OLS        OLS       OLS          IV         IV\n-----------------------------------------------------------------------------\nControls                      Yes                              Yes           \n-----------------------------------------------------------------------------\nFirst-stage F statistic                                  8,147.921    394.113\nN                           1,056      1,056     1,056       1,056      1,056\nR2                          0.003      0.440     0.456      -0.008      0.420\n-----------------------------------------------------------------------------\n\n```\n:::\n:::\n\n\n\n\n\n\n\n### Caveats\n\nBut we don't usually use this basic setup in IO. This is because the model is bit too simple to fully capture the reality. One of the well known problem is the **Independence of irrelevant alternatives (IIA)**. Basically what this means is that we don't get a realistic demand elasticities. If you want to know more about it, google the famouse ***Red bus, blue bus*** story. \n\n### Solutions?\n\nThere are some ways to alleviate this problem. One of them (which we will not discuss), is using nested logit. Basically we are defining certain group of products where IIA holds within the group but may not hold across the group. So for the case of red bus, blue bus, they would be in a same group.\n\nAnother way is to do enhance the random utility model into logit model with random coefficients. In essence, this is sort of introducing preference heterogeneity of consumers into the model. This is done by interacting consumer preferences with product characteristics. The nuisance with this case is that now closed-form expression for choice probability is not obtainable. We need to do some numerical computation.\n\n## Advanced: @blp (Random coefficients logit model)\n\nWe again start with the individual utility function. But now something is added (we will now also explicitly denote markets as $t$):\n\n$$\nu_{ijt} = x_{jt} \\beta_{it} + \\alpha p_{jt} + \\xi_{jt} + \\varepsilon_{ijt}\n$$\n\nThe difference is that slope coefficients can now vary across individuals $i$. For now, we will assume $\\beta_{it}^k = \\beta_0^k + \\sigma_{kt} v_{it}^k$. We now have $k$ which is the dimension of $\\beta$. $\\beta_0^k$ are fixed taste for characteristics $k$ and $v_{it}^k$ are random tastes that follow standard normal distribution.\n\nNow we can expand the model:\n\n\\begin{align}\n  u_{ijt} &= (x_{j1t}, \\ldots, x_{jKt}) \\cdot (\\beta_{0}^1 + \\sigma_1 v_{it}^1, \\ldots, \\beta_{0}^K + \\sigma_K v_{it}^K)^T + \\alpha p_{jt} + \\xi_{jt} + \\varepsilon_{ijt}\\\\\n  &= x_{jt}\\beta_{it} + \\sum_k x_{jkt} \\sigma_{k}v_{ikt} + \\alpha p_{jt} + \\xi_{jt} + \\varepsilon_{ijt}\\\\\n  &= \\underbrace{x_{jt}\\beta_{it} + \\alpha p_{jt} + \\xi_{jt}}_{\\delta_{jt}} + \\underbrace{\\sum_k x_{jkt} \\sigma_{k}v_{ikt}}_{\\mu_{ijt}} +  \\varepsilon_{ijt}.\n\n\\end{align}\n\nWe can easily see that this is just an extension of what we did for the basic random utility model. Indirect utility is made up of mean utility $\\delta_{jt}$ and random coefficient term $\\mu_{ijt} + \\varepsilon_{ijt}$.\n\nNow we will make some simplication. We will assume that characteristics dimension of individual is one: $K = 1$. Using this simplication, we can again use the assumption that idiosyncratic shock follows T1EV to get aggregate share:\n\n$$\ns_{jt} = \\int \\frac{\\exp(\\delta_{jt} + x_{jt} \\sigma_t v_{it})}{1 + \\sum_j \\exp(\\delta_{jt} + x_{jt} \\sigma_t v_{it})} f(v_i)dv_i\n$$\n\nThe integral has no analytical solution in the random coefficient model, so we\nneed to compute the integral by simulation. One way to do it is as follows:\n\n$$\n\\hat{s}_{jt} = \\frac{1}{ns} \\sum_{i=1}^{ns} \\frac{\\exp(\\delta_{jt} + x_{jt} \\sigma_t v_{it})}{1 + \\sum_j \\exp(\\delta_{jt} + x_{jt} \\sigma_t v_{it})}\n$$\n\nwhere $ns$ is number of random draws from $v_i$.\n\nNow we can see the inversion method we did before is not easy to implement. This is because we now have additional parameters that we do not know the values.\n\nSo in BLP, we need to do **nested estimation algorithm**.\n\n1. In the **outer loop**, we iterate over different values of the parameters.\n\n2. In the **inner loop**, for a given parameter value, we do the inversion to get the mean utility and estimate the GMM objective function.\n\n3. We keep on doing this iteration until we get the parameters that minimize the GMM function.\n\nNow let's do some coding!\n\n### Another coding (with `Julia`)\n\nThis portion of the code is from [here](https://github.com/leima0521/baby_BLP)\n\n\n\n\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\n###############################################################################\n####  BLP fixed-point algorithm, inverting mkt shares to get mean utility  ####\n###############################################################################\nusing CSV\nusing DataFrames\nusing GLM\nusing Statistics\nusing LinearAlgebra\nusing Distributions\nusing NLopt\notc = CSV.read(\"data/otc.csv\", DataFrame)\n\nns = 500;\nnmkt = maximum(otc.mkt);\nmkt = unique(otc.mkt);\nnprod = maximum(otc.product);\n\nvi = quantile.(Normal(), collect(range(0.5/ns, step = 1/ns, length = ns)));\nsigma = 1;\n\nfunction calc_mkt_share_t(delta_t, sigma_t, x_t, vi_t)\n    # Dimension: delta_t 11*1, simga_t 1*1, x_t 11*1\n    delta_t = delta_t .* ones(nprod, ns)\n    mu_t = x_t*sigma_t*vi_t'\n    numerator = exp.(delta_t .+ mu_t)\n    denominator = ones(nprod, ns) .+ sum(numerator, dims = 1)\n    mkt_share_t = mean(numerator./denominator, dims = 2)\nend\n\nfunction contraction_t(d0, sigma_t, x_t, vi_t, mkt_t, tol = 1e-5, maxiter = 1e5)\n    obs_mkt_share_t = mkt_t.mkt_share\n    d_old = d0\n    normdiff = Inf\n    iter = 0\n    while normdiff > tol && iter <= maxiter\n        model_mkt_share_t = calc_mkt_share_t(d_old, sigma_t, x_t, vi_t)\n        d_new = d_old .+ log.(obs_mkt_share_t) .- log.(model_mkt_share_t)\n        normdiff = maximum(norm.(d_new .- d_old))\n        d_old = d_new\n        iter += 1\n    end\n    return d_old\nend\n\nfunction calc_delta(sigma)\n    delta_fp = zeros(nprod, nmkt);\n    for t in mkt\n        mkt_t = otc[otc.mkt .== t, :];\n        x_t = ones(nprod, 1);\n        delta_t = zeros(nprod, 1);\n        sigma_t = sigma;\n        vi_t = vi;\n        delta_fp[:, t] = contraction_t(delta_t, sigma_t, x_t, vi_t, mkt_t);\n    end\n    return vec(delta_fp);\nend\n\n@time delta_fp = calc_delta(sigma);\nmean(delta_fp)\nstd(delta_fp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  1.348311 seconds (3.75 M allocations: 365.638 MiB, 3.21% gc time, 96.17% compilation time)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n0.8537059827877238\n```\n:::\n:::\n\n\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\n################################################################\n#### Estimate beta and sigma using GMM (cost as instrument) ####\n################################################################\nX = hcat(ones(nprod*nmkt, 1),\n         otc.price, otc.promotion,\n         otc.product_2, otc.product_3, otc.product_4, otc.product_5,\n         otc.product_6, otc.product_7, otc.product_8, otc.product_9,\n         otc.product_10, otc.product_11);\nz = hcat(X, otc.cost);\nPhi = z'*z/1056;\ninv_Phi = inv(Phi);\n\nfunction GMMObjFunc(theta2::Vector, grad::Vector)\n    sigma = theta2[1]\n    delta = calc_delta(sigma)\n    theta1 = inv(X'*z*inv_Phi*z'*X)*X'*z*inv_Phi*z'*delta\n    error = delta - X*theta1\n    obj = error'*z*inv_Phi*z'*error\n    return obj\nend\n\nopt = Opt(:LN_COBYLA, 1)\nopt.xtol_rel = 1e-4\nopt.lower_bounds = [0.00001]\nopt.min_objective = GMMObjFunc\n@time (minf,minx,ret) = optimize(opt, [1])\n\n@show sigma = minx[1]\ndelta = calc_delta(sigma[1]);\ntheta1 = inv(X'*z*inv_Phi*z'*X)*X'*z*inv_Phi*z'*delta\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 18.817741 seconds (20.18 M allocations: 109.887 GiB, 14.52% gc time, 0.73% compilation time)\nsigma = minx[1] = 28.720209709193362\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n13-element Vector{Float64}:\n -71.52085329511755\n  -1.0852292863458644\n   0.22206483339059624\n   1.903952993172239\n   3.990433860485858\n  -0.6194995526125144\n   1.2498418962356002\n   3.9120756908464607\n  -2.12500554825884\n  -1.1737916667530266\n   0.2462099284926299\n  -2.7352849052497947\n   0.011924728064080292\n```\n:::\n:::\n\n\n\n\n\n\n\n### My personal coding (again `Julia`)\n\nI will try to write my personal code using `Julia` following the exercises in [Mixtape session for Demand Estimation](https://github.com/Mixtape-Sessions/Demand-Estimation/tree/main). Note that I will be just copying the exercise questions from that site below. Also, I am going to use `Julia`.\n\n# Exercise 1\n\n## Introduction\n\nThis is the first of three exercises that will give you a solid foundation for doing BLP-style estimation. The running example is the same as in lecture: what if we halved an important product's price?\n\n## Setup\n\nMost of the computational heavy-lifting in these exercises will be done by the open-source Python package [PyBLP](https://github.com/jeffgortmaker/pyblp). It is easiest to use PyBLP in Python, and the hints/solutions for the exercises will be given in Python. But for those who are more familiar with R, it is straightforward to [call PyBLP from R](https://github.com/jeffgortmaker/pyblp#other-languages) with the [reticulate](https://rstudio.github.io/reticulate/) package. It is technically possible to call PyBLP from other languages like Julia and MATLAB, but most users either use Python or R.\n\nYou should install PyBLP on top of the [Anaconda Distribution](https://www.anaconda.com/). Anaconda comes pre-packaged with all of PyBLP's dependencies and many more Python packages that are useful for statistical computing. Steps:\n\n1. [Install Anaconda](https://docs.anaconda.com/free/anaconda/install/) if you haven't already. You may wish to [create a new environment](https://docs.anaconda.com/free/anacondaorg/user-guide/work-with-environments/) for just these exercises, but this isn't strictly necessary.\n2. [Install PyBLP](https://github.com/jeffgortmaker/pyblp#installation). On the Anaconda command line, you can run the command `pip install pyblp`.\n\nIf you're using Python, you have two broad options for how to do the coding exercises.\n\n- Use a [Jupyter Notebook](https://jupyter.org/install#jupyter-notebook). The solutions to each exercise will be in a notebook. In general, notebooks are a good way to weave text and code for short exercises, and to distribute quick snippets of code with others.\n- Use an integrated development environment (IDE). Once you get beyond a few hundred lines of code, I strongly recommend using an IDE and not notebooks. For Python, I recommend [VS Code](https://code.visualstudio.com/) or [PyCharm](https://www.jetbrains.com/pycharm/). The former is free and the latter has a free community edition with all the features you'll need for standard Python development. Both [integrate well](https://docs.anaconda.com/free/anaconda/ide-tutorials/) with Anaconda.\n\nIf using a notebook, you can right click and save the following notebook template: [notebook.ipynb](https://github.com/Mixtape-Sessions/Demand-Estimation/raw/main/Exercises/Templates/notebook.ipynb). If using an IDE, you can right click and save the following script template: [script.py](https://github.com/Mixtape-Sessions/Demand-Estimation/raw/main/Exercises/Templates/script.py). Both import various packages used throughout the exercise.\n\n\n\n\n\n```{python}\n#| eval: false\n \nimport pyblp\nimport numpy as np\nimport pandas as pd\nimport statsmodels.formula.api as smf\n```\n\n\n\n\n\nThe notebook additionally configures these packages to reduce the amount of information printed to the screen.\n\n\n\n\n\n```{python}\n#| eval: false\n \npyblp.options.digits = 3\npyblp.options.verbose = False\npd.options.display.precision = 3\npd.options.display.max_columns = 50\n\nimport IPython.display\nIPython.display.display(IPython.display.HTML('<style>pre { white-space: pre !important; }</style>'))\n```\n\n\n\n\n\nFinally, both show how to load the data that we'll be using today.\n\n## Data\n\nToday, you'll use the [`products.csv`](https://github.com/Mixtape-Sessions/Demand-Estimation/raw/main/Exercises/Data/products.csv) dataset, which is a simplified version of [Nevo's (2000)](https://nbviewer.org/github/Mixtape-Sessions/Demand-Estimation/raw/main/Readings/5-Nevo-2000.pdf) fake cereal data with less information and fewer derived columns. The data were motivated by real grocery store scanner data, but due to the proprietary nature of this type of data, the provided data are not entirely real. This dataset has been used as a standard example in much of the literature on BLP estimation.\n\nCompared to typical datasets you might use in your own work, the number of observations in this example dataset is quite small. This helps with making these exercises run very fast, but in practice one would want more data than just a couple thousand data points to estimate a flexible model of demand. Typical datasets will also include many more product characteristics. This one only includes a couple to keep the length of the exercises manageable.\n\nThe data contains information about 24 breakfast cereals across 94 markets. Each row is a product-market pair. Each market has the same set of breakfast cereals, although with different prices and quantities. The columns in the data are as follows.\n\nColumn              | Data Type | Description\n------------------- | --------- | -----------\n`market`            | String    | The city-quarter pair that defines markets $t$ used in these exercises. The data were motivated by real cereal purchase data across 47 US cities in the first 2 quarters of 1988.\n`product`           | String    | The firm-brand pair that defines products $j$ used in these exercises. Each of 5 firms produces between 1 and 9 brands of cereal.\n`mushy`             | Binary    | A dummy product characteristic equal to one if the product gets soggy in milk.\n`servings_sold`     | Float     | Total quantity $q_{jt}$ of servings of the product sold in a market, which will be used to compute market shares.\n`city_population`   | Float     | Total population of the city, which will be used to define a market size.\n`price_per_serving` | Float     | The product's price $p_{jt}$ used in these exercises.\n`price_instrument`  | Float     | An instrument to handle price endogeneity in these exercises. Think of it as a cost-shifter, a Hausman instrument, or any other valid IV that we discussed in class.\n\nThroughout the exercises, we use these data to estimate an increasingly flexible BLP-style model of demand for cereal. We will use predictions from this model to see how our running example, cutting the price of one cereal, affects demand for that cereal and for its substitutes.\n\n# Exercise 1\n\n## 1. Describe the data\n\nYou can download `products.csv` from [this link](https://github.com/Mixtape-Sessions/Demand-Estimation/raw/main/Exercises/Data/products.csv). To load it, you can use [`pd.read_csv`](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html). To look at a random sample of its rows, you can use [`.sample`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sample.html). To compute summary statistics for different columns, you can use [`.describe`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html). Throughout these exercises, you'll be given links to functions and methods that can be used to answer the questions. If you're unsure about how to use them, you should click on the link, where there is typically example code lower down on the page.\n\n\n\n\n\n::: {#10 .cell execution_count=1}\n``` {.julia .cell-code}\n\nusing CSV, DataFrames, DataFramesMeta, StatsModels, LinearAlgebra, Random, Statistics, Distributions\n\ndf = CSV.read(\"data/raw/products.csv\", DataFrame) \n\ndescribe(df)\n\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><div style = \"float: left;\"><span>7×7 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">variable</th><th style = \"text-align: left;\">mean</th><th style = \"text-align: left;\">min</th><th style = \"text-align: left;\">median</th><th style = \"text-align: left;\">max</th><th style = \"text-align: left;\">nmissing</th><th style = \"text-align: left;\">eltype</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Symbol\" style = \"text-align: left;\">Symbol</th><th title = \"Union{Nothing, Float64}\" style = \"text-align: left;\">Union…</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Union{Nothing, Float64}\" style = \"text-align: left;\">Union…</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"DataType\" style = \"text-align: left;\">DataType</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">market</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">C01Q1</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String7</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">product</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">F1B04</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">F6B18</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String7</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">mushy</td><td style = \"text-align: left;\">0.333333</td><td style = \"text-align: left;\">0</td><td style = \"text-align: left;\">0.0</td><td style = \"text-align: left;\">1</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">servings_sold</td><td style = \"text-align: left;\">1.20296e6</td><td style = \"text-align: left;\">4085.41</td><td style = \"text-align: left;\">3.62285e5</td><td style = \"text-align: left;\">9.85623e7</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">city_population</td><td style = \"text-align: left;\">641995.0</td><td style = \"text-align: left;\">173072</td><td style = \"text-align: left;\">332943.0</td><td style = \"text-align: left;\">7322564</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">price_per_serving</td><td style = \"text-align: left;\">0.12574</td><td style = \"text-align: left;\">0.0454871</td><td style = \"text-align: left;\">0.123829</td><td style = \"text-align: left;\">0.225728</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">price_instrument</td><td style = \"text-align: left;\">0.0908116</td><td style = \"text-align: left;\">-0.00265638</td><td style = \"text-align: left;\">0.0890101</td><td style = \"text-align: left;\">0.188043</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n\n\n\n\n\n## 2. Compute market shares\n\nTo transform observed quantities $q_{jt}$ into market shares $s_{jt} = q_{jt} / M_t$, we first need to define a market size $M_t$. We'll assume that the potential number of servings sold in a market is the city's total population multiplied by 90 days in the quarter. Create [a new column](https://pandas.pydata.org/docs/getting_started/intro_tutorials/05_add_columns.html) called `market_size` equal to `city_population` times `90`. Note that this assumption is somewhat reasonable but also somewhat arbitrary. Perhaps a sizable portion of the population in a city would never even consider purchasing cereal. Or perhaps those who do tend to want more than one serving per day. In the third exercise, we'll think more about how to discipline our market size assumption with data.\n\nNext, compute a new column `market_share` equal to `servings_sold` divided by `market_size`. This gives our market shares $s_{jt}$. We'll also need the outside share $s_{0t} = 1 - \\sum_{j \\in J_t} s_{jt}$. Create a new column `outside_share` equal to this expression. You can use [`.groupby`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html) to group by market and [`.transform('sum')`](https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html) to compute the within-market sum of inside shares. Compute summary statistics for your inside and outside shares. If you computed market shares correctly, the smallest outside share should be $s_{0t} \\approx 0.305$ and the largest should be $s_{0t} \\approx 0.815$.\n\n\n\n\n\n::: {#12 .cell execution_count=1}\n``` {.julia .cell-code}\n\n@transform! df :market_size = :city_population .* 90\n\n@transform! df :market_share = :servings_sold ./ :market_size\n\n@chain df begin\n  groupby(:market)\n  @transform! :outside_share = 1 .- sum(:market_share)\nend\n\ndescribe(df.outside_share)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSummary Stats:\nLength:         2256\nMissing Count:  0\nMean:           0.524197\nStd. Deviation: 0.109622\nMinimum:        0.304575\n1st Quartile:   0.439481\nMedian:         0.535808\n3rd Quartile:   0.604251\nMaximum:        0.815168\nType:           Float64\n```\n:::\n:::\n\n\n\n\n\n\n\n## 3. Estimate the pure logit model with OLS\n\nRecall the pure logit estimating equation: $\\log(s_{jt} / s_{0t}) = \\delta_{jt} = \\alpha p_{jt} + x_{jt}' \\beta + \\xi_{jt}$. First, create a new column `logit_delta` equal to the left-hand side of this expression. You can use [`np.log`](https://numpy.org/doc/stable/reference/generated/numpy.log.html) to compute the log.\n\n\n\n\n\n::: {#14 .cell execution_count=1}\n``` {.julia .cell-code}\n\n@transform! df :logit_delta = log.(:market_share) .- log.(:outside_share)\n\nfirst(df, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><div style = \"float: left;\"><span>5×11 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">market</th><th style = \"text-align: left;\">product</th><th style = \"text-align: left;\">mushy</th><th style = \"text-align: left;\">servings_sold</th><th style = \"text-align: left;\">city_population</th><th style = \"text-align: left;\">price_per_serving</th><th style = \"text-align: left;\">price_instrument</th><th style = \"text-align: left;\">market_size</th><th style = \"text-align: left;\">market_share</th><th style = \"text-align: left;\">outside_share</th><th style = \"text-align: left;\">logit_delta</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B04</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">5.76945e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0720879</td><td style = \"text-align: right;\">0.0354837</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0124172</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.80029</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B06</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">362850.0</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.114178</td><td style = \"text-align: right;\">0.0725791</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.00780939</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-4.26405</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B07</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">603768.0</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.132391</td><td style = \"text-align: right;\">0.101842</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0129945</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.75485</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B09</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">2.68092e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.130344</td><td style = \"text-align: right;\">0.104332</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.00576996</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-4.56671</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B11</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">8.3328e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.154823</td><td style = \"text-align: right;\">0.121111</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0179341</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.43267</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n\n\n\n\n\nThen, use the package of your choice to run an OLS regression of `logit_delta` on a constant, `mushy`, and `price_per_serving`. There are many packages for running OLS regressions in Python. One option is to use the [formula interface for `statsmodels`](https://www.statsmodels.org/stable/example_formulas.html#ols-regression-using-formulas). To use robust standard errors, you can specify `cov_type='HC0'` in [`OLS.fit`](https://www.statsmodels.org/stable/generated/statsmodels.regression.linear_model.OLS.fit.html).\n\nInterpret your estimates. Your coefficient on `price_per_serving` should be around `-7.48`. In particular, can you re-express your estimate on `mushy` in terms of how much consumers are willing to pay for `mushy`, using your estimated price coefficient?\n\n\n\n\n\n::: {#16 .cell execution_count=1}\n``` {.julia .cell-code}\n\nusing FixedEffectModels, RegressionTables\n\nols = reg(df, @formula(logit_delta ~ mushy + price_per_serving), Vcov.robust())\n\nregtable(ols, order = [\"price_per_serving\"], drop = [\"(Intercept)\"], regression_statistics = [Nobs, R2])\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n\n-------------------------------\n                    logit_delta\n-------------------------------\nprice_per_serving     -7.480***\n                        (0.840)\nmushy                     0.075\n                        (0.054)\n-------------------------------\nControls                    Yes\n-------------------------------\nN                         2,256\nR2                        0.034\n-------------------------------\n\n```\n:::\n:::\n\n\n\n\n\n\n\n## 4. Run the same regression with PyBLP\n\nFor the rest of the exercises, we'll use PyBLP do to our demand estimation. This isn't necessary for estimating the pure logit model, which can be done with linear regressions, but using PyBLP allows us to easily run our price cut counterfactual and make the model more flexible in subsequent days' exercises.\n\nPyBLP requires that some key columns have specific names. You can use [`.rename`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html) to rename the following columns so that they can be understood by PyBLP.\n\n- `market` --> `market_ids`\n- `product` --> `product_ids`\n- `market_share` --> `shares`\n- `price_per_serving` --> `prices`\n\nBy default, PyBLP treats `prices` as endogenous, so it won't include them in its matrix of instruments. But the \"instruments\" for running an OLS regression are the same as the full set of regressors. So when running an OLS regression and not account for price endogeneity, we'll \"instrument\" for `prices` with `prices` themselves. We can do this by creating a new column `demand_instruments0` equal to `prices`. PyBLP will recognize all columns that start with `demand_instruments` and end with `0`, `1`, `2`, etc., as \"excluded\" instruments to be stacked with the exogenous characteristics to create the full set of instruments.\n\nWith the correct columns in hand, we can initialize our [`pyblp.Problem`](https://pyblp.readthedocs.io/en/stable/_api/pyblp.Problem.html). To specify the same R-style formula for our regressors, use [`pyblp.Formulation`](https://pyblp.readthedocs.io/en/stable/_api/pyblp.Formulation.html). The full code should look like the following.\n\n\n\n\n\n```{python}\n#| eval: false\n \nols_problem = pyblp.Problem(pyblp.Formulation('1 + mushy + prices'), product_data)\n```\n\n\n\n\n\nIf you `print(ols_problem)`, you'll get information about the configured problem. There should be 94 markets (`T`), 2256 observations (`N`), 3 product characteristics (`K1`), and 3 total instruments (`MD`). You can verify that these instruments are simply the regressors by looking at `ols_problem.products.X1` and `ols_problem.products.ZD`, comparing these with `mushy` and `prices` in your dataframe. For the full set of notation used by PyBLP, which is very close to the notation used in the lectures, see [this page](https://pyblp.readthedocs.io/en/stable/notation.html).\n\nTo estimate the configured problem, use [`.solve`](https://pyblp.readthedocs.io/en/stable/_api/pyblp.Problem.solve.html). Use `method='1s'` to just do 1-step GMM instead of the default 2-step GMM. In this case, this will just run a simple linear OLS regression. The full code should look like the following.\n\n\n\n\n\n```{python}\n#| eval: false\n \nols_results = ols_problem.solve(method='1s')\n```\n\n\n\n\n\nAgain, if you `print(ols_results)`, you'll get estimates from the logit model. Make sure that your estimates are the same as those you got from your OLS regression. If you used `'HC0'` standard errors like suggested above, you standard errors should also be the same.\n\n## 5. Add market and product fixed effects\n\nSince we expect price $p_{jt}$ to be correlated with unobserved product quality $\\xi_{jt}$, we should be worried that our estimated $\\hat{\\alpha}$ on price is biased. Since we have multiple observations per market and product, and prices vary both across and within markets, it is feasible for us to add both market and product fixed effects. If $\\xi_{jt} = \\xi_j + \\xi_t + \\Delta\\xi_{jt}$ and most of the correlation between $p_{jt}$ and $\\xi_{jt}$ is due to correlation between $p_{jt}$ and either $\\xi_j$ (product fixed effects) or $\\xi_t$ (market fixed effects), then explicitly accounting for these fixed effects during estimation should help reduce the bias of our $\\hat{\\alpha}$.\n\nThe simplest way to add fixed effects is as dummy variables. We won't do this today, but for your own reference, you could do this either by making a separate column for each possible market and product fixed effects and adding these to your formulation, or you could use the shorthand `mushy + prices + C(market_ids) + C(product_ids)`. See [`pyblp.Formulation`](https://pyblp.readthedocs.io/en/stable/_api/pyblp.Formulation.html) for different shorthands you can use. Since there are only 24 products and 94 markets for a total of 118 fixed effects, this approach is actually feasible in this case. But in a more realistic dataset with hundreds or thousands of products and markets, running an OLS regression with this many dummy variables starts to become computationally infeasible.\n\nThe alternative, which we'll do today, is to \"absorb\" the fixed effects. For a single fixed effect, we could just de-mean our outcome variable and each of our regressors within the fixed effects levels, and then run our regression. For multiple fixed effects, we need to *iteratively* de-mean. PyBLP does this automatically if you specify `absorb='C(market_ids) + C(product_ids)'` in your formulation instead of adding these as dummy variables.\n\nSince `mushy` is always either 1 or 0 for the same product across different markets, it's collinear with product fixed effects, and you can drop it from your formula. Similarly, you can drop the constant. After dropping these, re-create your problem with absorbed fixed effects and re-solve it. Compare the new $\\hat{\\alpha}$ estimate with the last one. You should now be getting a coefficient on price of around `-28.6`. Does its change suggest that price was positively or negatively correlated with unobserved product-level/market-level quality?\n\n\n\n\n\n::: {#18 .cell execution_count=1}\n``` {.julia .cell-code}\n\nols2 = reg(df, @formula(logit_delta ~ price_per_serving + fe(market) + fe(product)), Vcov.robust())\n\nregtable(ols2, order = [\"price_per_serving\"], drop = [\"(Intercept)\"], regression_statistics = [Nobs, R2])\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n\n-----------------------------------\n                        logit_delta\n-----------------------------------\nprice_per_serving        -28.618***\n                            (0.916)\n-----------------------------------\nmarket Fixed Effects            Yes\nproduct Fixed Effects           Yes\n-----------------------------------\nN                             2,256\nR2                            0.560\n-----------------------------------\n\n```\n:::\n:::\n\n\n\n\n\n\n\n## 6. Add an instrument for price\n\nAdding market and product fixed effects can be helpful, but since unobserved quality typically varies by both product *and* market, we really want to instrument for prices. The data comes with a column `price_instrument` that we should interpret as a valid instrument for price that satisfies the needed exclusion restriction. It could be a cost-shifter, a valid Hausman instrument, or similar.\n\nBefore using it, we should first run a first-stage regression to make sure that it's a relevant instrument for price. To do so, use the same package you used above to run an OLS regression to run a second OLS regression of prices on `price_instrument` and your market and product fixed effects. If using the [formula interface for `statsmodels`](https://www.statsmodels.org/stable/example_formulas.html#ols-regression-using-formulas), you can use the same fixed effect shorthand as in PyBLP, with your full formula looking like `prices ~ price_instrument + C(market_ids) + C(product_ids)`. Does `price_instrument` seem like a relevant instrument for `prices`?\n\n\n\n\n\n::: {#20 .cell execution_count=1}\n``` {.julia .cell-code}\n\n# first stage\niv0 = reg(df, @formula(price_per_serving ~ price_instrument + fe(market) + fe(product)), Vcov.robust())\n\nregtable(iv0, order = [\"price_instrument\"], drop = [\"(Intercept)\"], regression_statistics = [FStatIV, Nobs, R2])\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n\n-------------------------------------------\n                          price_per_serving\n-------------------------------------------\nprice_instrument                   0.877***\n                                    (0.007)\n-------------------------------------------\nmarket Fixed Effects                    Yes\nproduct Fixed Effects                   Yes\n-------------------------------------------\nFirst-stage F statistic                    \nN                                     2,256\nR2                                    0.964\n-------------------------------------------\n\n```\n:::\n:::\n\n\n\n\n\n\n\nNow that we've checked relevance, we can set our `demand_instruments0` column equal to `price_instrument`, re-create the problem, and re-solve it. You should get a new coefficient on price of around `-30.6`. Does the change in $\\hat{\\alpha}$ suggest that price was positively or negatively correlated with $\\Delta\\xi_{jt}$ in $\\xi_{jt} = \\xi_j + \\xi_t + \\Delta\\xi_{jt}$?\n\n\n\n\n\n::: {#22 .cell execution_count=1}\n``` {.julia .cell-code}\n\n# first stage\niv1 = reg(df, @formula(logit_delta ~ (price_per_serving ~ price_instrument) + fe(market) + fe(product)), Vcov.robust())\n\nregtable(iv1, order = [\"price_per_serving\"], drop = [\"(Intercept)\"], regression_statistics = [FStatIV, Nobs, R2])\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n\n-------------------------------------\n                          logit_delta\n-------------------------------------\nprice_per_serving          -30.600***\n                              (0.994)\n-------------------------------------\nmarket Fixed Effects              Yes\nproduct Fixed Effects             Yes\n-------------------------------------\nFirst-stage F statistic    16,814.451\nN                               2,256\nR2                              0.559\n-------------------------------------\n\n```\n:::\n:::\n\n\n\n\n\n\n\n\n## 7. Cut a price in half and see what happens\n\nNow that we have our pure logit model estimated, we can run our counterfactual of interest: what if we halved an important product's price? We'll select a single market, the most recent quarter in the first city: `C01Q2`. Create a new dataframe called `counterfactual_data` by [selecting](https://pandas.pydata.org/docs/getting_started/intro_tutorials/03_subset_data.html) data for just that market and inspect the data. We'll pretend that we're firm one, and deciding whether we want to cut the price of our brand four's product `F1B04`. In particular, we might be worried about *cannibalization*, i.e. how much this price cut will result in consumers of our other 8 brands of cereal in this market just substituting from their old choice to the new, cheaper cereal. Alternatively, we could be a regulator or academic interested in how taxing that product would affect demand in the market.\n\nIn your new dataframe with just data from `C01Q2`, create a `new_prices` column that is the same as `prices` but with the price of `F1B04` cut in half. To do this, you could use [`DataFrame.loc`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.loc.html). Then, use [`.compute_shares`](https://pyblp.readthedocs.io/en/stable/_api/pyblp.ProblemResults.compute_shares.html) on your results from the last question, passing `market_id='C01Q2'` to only compute new market shares for our market of interest, and passing `prices=counterfactual_data['new_prices']` to specify that prices should be set to the new prices. This function will re-compute market shares at the changed prices implied by the model's estimates. Store them in a `new_shares` column.\n\nCompute the percent change in shares for each product in the market. From firm one's perspective, do the estimates of cannibalization make sense. That is, do the signs on the percent changes for product `F1B04` and for other products make sense? Would you normally expect percent changes for other products to be different depending on how other products compare to the one whose price is being changed?\n\n\n\n\n\n::: {#24 .cell execution_count=1}\n``` {.julia .cell-code}\n\ncounterfactual_data = @rsubset df :market == \"C01Q2\" \n\n@rtransform! df :new_prices = ifelse(:product == \"F1B04\", :price_per_serving / 2, :price_per_serving)\n\nfirst(counterfactual_data, 5)\n\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><div style = \"float: left;\"><span>5×11 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">market</th><th style = \"text-align: left;\">product</th><th style = \"text-align: left;\">mushy</th><th style = \"text-align: left;\">servings_sold</th><th style = \"text-align: left;\">city_population</th><th style = \"text-align: left;\">price_per_serving</th><th style = \"text-align: left;\">price_instrument</th><th style = \"text-align: left;\">market_size</th><th style = \"text-align: left;\">market_share</th><th style = \"text-align: left;\">outside_share</th><th style = \"text-align: left;\">logit_delta</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">C01Q2</td><td style = \"text-align: left;\">F1B04</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.99352e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0777177</td><td style = \"text-align: right;\">0.0441138</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.00644276</td><td style = \"text-align: right;\">0.502744</td><td style = \"text-align: right;\">-4.35712</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">C01Q2</td><td style = \"text-align: left;\">F1B06</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">6.56443e6</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.141041</td><td style = \"text-align: right;\">0.101043</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.141282</td><td style = \"text-align: right;\">0.502744</td><td style = \"text-align: right;\">-1.26932</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">C01Q2</td><td style = \"text-align: left;\">F1B07</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">4.08387e6</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0726827</td><td style = \"text-align: right;\">0.0164402</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0878946</td><td style = \"text-align: right;\">0.502744</td><td style = \"text-align: right;\">-1.74394</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">C01Q2</td><td style = \"text-align: left;\">F1B09</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">3.07654e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0769744</td><td style = \"text-align: right;\">0.0498315</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.00662145</td><td style = \"text-align: right;\">0.502744</td><td style = \"text-align: right;\">-4.32977</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">C01Q2</td><td style = \"text-align: left;\">F1B11</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">2.52179e6</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.167009</td><td style = \"text-align: right;\">0.132775</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0542749</td><td style = \"text-align: right;\">0.502744</td><td style = \"text-align: right;\">-2.22602</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n\n\n\n\n\n## 8. Compute demand elasticities\n\nTo better understand what's going on, use [`.compute_elasticities`](https://pyblp.readthedocs.io/en/stable/_api/pyblp.ProblemResults.compute_elasticities.html), again specifying `market_id='C01Q2'`, to compute price elasticities for our market of interest. These measure what the model predicts will happen to demand in percentage terms when there's a 1% change in price of a product. The diagonal elements are own-price elasticities and the off-diagonal elements are cross-price elasticities. Does demand seem very elastic? Do the cross-price elasticities seem particularly reasonable?\n\n## Supplemental Questions\n\nThese questions will not be directly covered in lecture, but will be useful to think about when doing BLP-style estimation in your own work.\n\n## 1. Try different standard errors\n\nBy default, PyBLP computed standard errors that are robust to heteroskedasticity. But we may be concerned that unobserved quality $\\xi_{jt}$ is systematically correlated across markets for a given product $j$, or across products for a given market $t$. Choose which one you think is more likely and try clustering your standard errors by that dimension. You can do this with `se_type='clustered'` in [`.solve`](https://pyblp.readthedocs.io/en/stable/_api/pyblp.Problem.solve.html), for which you'll need a `clustering_ids` column in your product data. See how your standard error for $\\alpha$ changes.\n\n## 2. Compute confidence intervals for your counterfactual\n\nYour estimate of $\\hat{\\alpha}$ comes with a standard error, but your counterfactual demand predictions don't. Ideally we'd like to not only have a point estimate for a counterfactual prediction, but also a measure (up to model misspecification) of how confident we are in these predictions. The easiest way to do this is with a \"parametric bootstrap.\" The intuition is we can draw from the estimated asymptotic distribution of our $\\hat{\\alpha}$, and for each draw, re-compute demand, and see how demand responds to the same price cut.\n\nYou can do a parametric bootstrap with the [`.bootstrap`](https://pyblp.readthedocs.io/en/stable/_api/pyblp.ProblemResults.bootstrap.html) method. Start with just a few draws (e.g., `draws=100`) and remember to set your `seed` so that you get the same draws every time you run the code. When new parameters are drawn, you get new [`.boostrapped_shares`](https://pyblp.readthedocs.io/en/stable/_api/pyblp.BootstrappedResults.html#pyblp.BootstrappedResults.bootstrapped_shares), which take the place of your old `shares`. You can use the same [`.compute_shares`](https://pyblp.readthedocs.io/en/stable/_api/pyblp.ProblemResults.compute_shares.html) method on the [`BootstrapedResults`](https://pyblp.readthedocs.io/en/stable/_api/pyblp.BootstrappedResults.html) class, although you'll have to pass a `prices` argument with prices replicated along a new axis by as many draws as you have.\n\nOnce you have some bootstrapped shares, compute the same percent changes, and compute the 2.5th and 97.5th percentiles of these changes for each product. Are these 95% confidence intervals for your predictions particularly wide?\n\n## 3. Impute marginal costs from pricing optimality\n\nThe canonical demand side of the BLP model assumes firms set prices in static Bertrand-Nash equilibrium. See [this section](https://pyblp.readthedocs.io/en/stable/background.html#supply) for a quick summary using PyBLP notation. Given an estimated demand model and such assumptions about pricing, we can impute marginal costs `c_{jt}`.\n\nTo do so, you first need to tell PyBLP what firms own what products. Create a new `firm_ids` column in your data, re-initialize your problem, and re-solve it. Then, you should be able to run the [`.compute_costs`](https://pyblp.readthedocs.io/en/stable/_api/pyblp.ProblemResults.compute_costs.html) method to impute firms' marginal cost of producing each cereal. Do these marginal costs look particularly reasonable? How might limitations of your demand model and supply model bias them? What would they and observed prices imply about firms' markups and economic profits?\n\n## 4. Check your code by simulating data\n\nEven experienced software developers make a lot of mistakes when writing code. Writing \"unit tests\" or \"integration tests\" that check whether the code you've written seems to be working properly is incredibly important when writing complicated code to estimate demand. Perhaps the most useful test you can write when doing demand estimation (or most other types of structural estimation) is the following.\n\n1. Simulate fake data under some true parameters.\n2. Estimate your model on the simulated data and make sure that you can recover the true parameters, up to sampling error.\n\nIf you do these steps many times, the resulting Monte Carlo experiment will also give you a good sense for the finite sample statistical properties of your estimator.\n\nPyBLP's [`Simulation`](https://pyblp.readthedocs.io/en/stable/_api/pyblp.Simulation.html) class makes simulating data fairly straightforward. Its interface is similar to [`Problem`](https://pyblp.readthedocs.io/en/stable/_api/pyblp.Problem.html), but you also specify your parameter estimates and structural errors. In addition to checking your code, you can also use this class for more complicated counterfactuals. After initializing your simulation, you can use [`.replace_endogenous`](https://pyblp.readthedocs.io/en/stable/_api/pyblp.Simulation.replace_endogenous.html) to have PyBLP replace the prices $p_{jt}$ and market shares $s_{jt}$ with those that rationalize the chosen true parameters and other parts of the simulation. It does so by solving the pricing equilibrium. You'll have to pass your imputed marginal costs via the `costs` argument.\n\nInitialize a simulation of the pure logit model with the same `product_data` and the same estimated `xi` but with an $\\alpha$ somewhat different than the one you estimated. Make sure your chosen $\\alpha$ is negative, otherwise demand will be upward sloping and PyBLP will have trouble solving for equilibrium prices. To the estimated [`.xi`](https://pyblp.readthedocs.io/en/latest/_api/pyblp.ProblemResults.html#pyblp.ProblemResults.xi) you can add the estimated fixed effects [`.xi_fe`](https://pyblp.readthedocs.io/en/latest/_api/pyblp.ProblemResults.html#pyblp.ProblemResults.xi_fe), since the simulation class does not support fixed effects absorption.\n\nHave PyBLP solve for prices and market shares, and use the resulting data to re-estimate your pure logit regression. See if you can get an estimated $\\hat{\\alpha}$ close to the true one.\n\n# Exercise 2\n\n## Introduction\n\nThis is the second of three exercises that will give you a solid foundation for doing BLP-style estimation. We'll continue with the same running example: what if we halved an important product's price? Our goal today is to relax some of the unrealistic substitution patterns implied by the pure logit model by incorporating preference heterogeneity. To do so, we will use cross-market variation in our product and some new demographic data to estimate parameters that govern preference heterogeneity.\n\n## Setup\n\nWe'll be continuing where we left off after the [first exercise](https://github.com/Mixtape-Sessions/Demand-Estimation/blob/main/Exercises/Exercise-1/README.md). You should just keep adding to your code, using [its solutions](https://github.com/Mixtape-Sessions/Demand-Estimation/blob/main/Exercises/Exercise-1/Solutions.ipynb) if you had trouble with some parts.\n\n## Data\n\nToday, you'll incorporate [`demographics.csv`](https://github.com/Mixtape-Sessions/Demand-Estimation/raw/main/Exercises/Data/demographics.csv) into estimation, which again is a simplified version of [Nevo's (2000)](https://nbviewer.org/github/Mixtape-Sessions/Demand-Estimation/raw/main/Readings/5-Nevo-2000.pdf) demographic data with less information and fewer derived columns. The data were originally draws from the Current Population Survey.\n\nIn your own work, when incorporating demographic data into estimation, you will want to sample from the whole Current Population Survey (or whatever survey/census data you are using), not just from a subset of it. The small size of today's demographic data helps with distributing the data, but in practice you should ideally be sampling from a much larger dataset of demographic information. In your own work you will also want to incorporate more demographic variables than the one included in this dataset. Like the product data, in these exercises we only consider a few columns to keep the exercises a manageable length.\n\nThe demographic dataset contains information about 20 individuals drawn from the Current Population Survey for each of the 94 markets in the product data. Each row is a different individual. The columns in the data are as follows.\n\nColumn             | Data Type | Description\n------------------ | --------- | -----------\n`market`           | String    | The city-quarter pair that defines markets $t$ used in these exercises. The data were motivated by real cereal purchase data across 47 US cities in the first 2 quarters of 1988.\n`quarterly_income` | Float     | The quarterly income of the individual in dollars.\n\nIn today and tomorrow's exercises, we will use these demographic data to introduce income-specific preference heterogeneity into our BLP model of demand for cereal and see how our counterfactual changes. By incorporating income, we will also be able to speak to distributional concerns: how will counterfactual changes in the market differentially affect high- and low-income consumers?\n\n## My BLP.jl (This section failed miserably...)\n\nIn this section, I will try my best to make a very flexible BLP estimation code.\n\nFirst load two data we will use and see how they look like:\n\n\n\n\n\n::: {#26 .cell execution_count=1}\n``` {.julia .cell-code}\nusing CSV, DataFrames, DataFramesMeta, Random, LinearAlgebra, Statistics, Distributions, StatsBase\nusing FixedEffectModels, RegressionTables, Optim\n\n# Load the necessary data\ndata_prod = df;\n\n# rename each certain columns to match it to the key argument in later functions\n\n@rename! data_prod begin\n  :market_id = :market\n  :product_id = :product\n  :price_x0 = :price_per_serving\n  :mushy_x1 = :mushy\n  :price_instrument_z0 = :price_instrument\n  :s_obs = :market_share\n  :s_out = :outside_share\nend\n\nfirst(data_prod, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING: using Optim.optimize in module Notebook conflicts with an existing identifier.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><div style = \"float: left;\"><span>5×12 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">market_id</th><th style = \"text-align: left;\">product_id</th><th style = \"text-align: left;\">mushy_x1</th><th style = \"text-align: left;\">servings_sold</th><th style = \"text-align: left;\">city_population</th><th style = \"text-align: left;\">price_x0</th><th style = \"text-align: left;\">price_instrument_z0</th><th style = \"text-align: left;\">market_size</th><th style = \"text-align: left;\">s_obs</th><th style = \"text-align: left;\">s_out</th><th style = \"text-align: left;\">logit_delta</th><th style = \"text-align: left;\">new_prices</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B04</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">5.76945e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0720879</td><td style = \"text-align: right;\">0.0354837</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0124172</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.80029</td><td style = \"text-align: right;\">0.036044</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B06</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">362850.0</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.114178</td><td style = \"text-align: right;\">0.0725791</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.00780939</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-4.26405</td><td style = \"text-align: right;\">0.114178</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B07</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">603768.0</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.132391</td><td style = \"text-align: right;\">0.101842</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0129945</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.75485</td><td style = \"text-align: right;\">0.132391</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B09</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">2.68092e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.130344</td><td style = \"text-align: right;\">0.104332</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.00576996</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-4.56671</td><td style = \"text-align: right;\">0.130344</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B11</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">8.3328e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.154823</td><td style = \"text-align: right;\">0.121111</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0179341</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.43267</td><td style = \"text-align: right;\">0.154823</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n\n::: {#28 .cell execution_count=1}\n``` {.julia .cell-code}\n# Load the necessary data\ndata_demo = CSV.read(\"data/raw/demographics.csv\", DataFrame)\n\n@rename! data_demo begin\n  :market_id = :market\n  :log_income_y0 = :quarterly_income\nend\n\n@rtransform! data_demo :log_income_y0 = log(:log_income_y0)\n\nfirst(data_demo, 5)\n\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><div style = \"float: left;\"><span>5×2 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">market_id</th><th style = \"text-align: left;\">log_income_y0</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">8.58651</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">9.48285</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">8.40662</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">7.69358</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">6.42269</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n\n\n\n\n\nNext we sample the demo data to have 1000 random draw for each market:\n\n\n\n\n\n::: {#30 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction sample_ind(df, n = 1000, seedn = 123)\n    Random.seed!(seedn)\n\n    grouped = groupby(df, :market_id)\n\n    sampled_df = combine(grouped) do subdf\n        sampled_rows = sample(eachrow(subdf), n; replace = true)\n        DataFrame(sampled_rows)\n    end\n\n    sampled_df = transform(groupby(sampled_df, :market_id), eachindex => :ind_id)\n\n    return sampled_df\nend\n\n# 94 markets x 1000 individual\ndata_demo = sample_ind(data_demo);\n\n\ndata_demo\n# first(data_demo, 10)\n\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><div style = \"float: left;\"><span>94000×3 DataFrame</span></div><div style = \"float: right;\"><span style = \"font-style: italic;\">93975 rows omitted</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">market_id</th><th style = \"text-align: left;\">log_income_y0</th><th style = \"text-align: left;\">ind_id</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">8.39605</td><td style = \"text-align: right;\">1</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">7.76281</td><td style = \"text-align: right;\">2</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">7.75411</td><td style = \"text-align: right;\">3</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">9.09651</td><td style = \"text-align: right;\">4</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">9.09651</td><td style = \"text-align: right;\">5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">7.75411</td><td style = \"text-align: right;\">6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">8.29923</td><td style = \"text-align: right;\">7</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">8.40662</td><td style = \"text-align: right;\">8</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">8.47015</td><td style = \"text-align: right;\">9</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">8.1857</td><td style = \"text-align: right;\">10</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">11</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">7.77479</td><td style = \"text-align: right;\">11</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">12</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">7.76281</td><td style = \"text-align: right;\">12</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">13</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">9.09651</td><td style = \"text-align: right;\">13</td></tr><tr><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93989</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">8.46581</td><td style = \"text-align: right;\">989</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93990</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">7.4559</td><td style = \"text-align: right;\">990</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93991</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">8.68641</td><td style = \"text-align: right;\">991</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93992</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">7.5741</td><td style = \"text-align: right;\">992</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93993</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">7.91547</td><td style = \"text-align: right;\">993</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93994</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">8.98306</td><td style = \"text-align: right;\">994</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93995</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">8.45945</td><td style = \"text-align: right;\">995</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93996</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">8.95375</td><td style = \"text-align: right;\">996</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93997</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">7.80121</td><td style = \"text-align: right;\">997</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93998</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">7.17447</td><td style = \"text-align: right;\">998</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93999</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">7.58398</td><td style = \"text-align: right;\">999</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">94000</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">5.13197</td><td style = \"text-align: right;\">1000</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n\n\n\n\n\nCreate unobserved individual $v_{it}$:\n\n\n\n\n\n::: {#32 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction create_v!(df::DataFrame, node::Int)\n    for i in 1:node\n        colname = Symbol(\"node_y\", i)\n        df[!, colname] = randn(nrow(df))\n    end\n    return df\nend\n\ncreate_v!(data_demo, 1)\n\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><div style = \"float: left;\"><span>94000×4 DataFrame</span></div><div style = \"float: right;\"><span style = \"font-style: italic;\">93975 rows omitted</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">market_id</th><th style = \"text-align: left;\">log_income_y0</th><th style = \"text-align: left;\">ind_id</th><th style = \"text-align: left;\">node_y1</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">8.39605</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">0.808288</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">7.76281</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">-1.12207</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">7.75411</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">-1.10464</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">9.09651</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">-0.416993</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">9.09651</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">0.287588</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">7.75411</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">0.229819</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">8.29923</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">-0.421769</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">8.40662</td><td style = \"text-align: right;\">8</td><td style = \"text-align: right;\">-1.35559</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">8.47015</td><td style = \"text-align: right;\">9</td><td style = \"text-align: right;\">0.0694591</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">8.1857</td><td style = \"text-align: right;\">10</td><td style = \"text-align: right;\">-0.117323</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">11</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">7.77479</td><td style = \"text-align: right;\">11</td><td style = \"text-align: right;\">1.21928</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">12</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">7.76281</td><td style = \"text-align: right;\">12</td><td style = \"text-align: right;\">0.292914</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">13</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: right;\">9.09651</td><td style = \"text-align: right;\">13</td><td style = \"text-align: right;\">-0.0311481</td></tr><tr><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93989</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">8.46581</td><td style = \"text-align: right;\">989</td><td style = \"text-align: right;\">1.45184</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93990</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">7.4559</td><td style = \"text-align: right;\">990</td><td style = \"text-align: right;\">-0.873824</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93991</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">8.68641</td><td style = \"text-align: right;\">991</td><td style = \"text-align: right;\">0.534542</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93992</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">7.5741</td><td style = \"text-align: right;\">992</td><td style = \"text-align: right;\">0.487625</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93993</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">7.91547</td><td style = \"text-align: right;\">993</td><td style = \"text-align: right;\">-1.12754</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93994</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">8.98306</td><td style = \"text-align: right;\">994</td><td style = \"text-align: right;\">0.991109</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93995</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">8.45945</td><td style = \"text-align: right;\">995</td><td style = \"text-align: right;\">-0.112785</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93996</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">8.95375</td><td style = \"text-align: right;\">996</td><td style = \"text-align: right;\">-1.30939</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93997</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">7.80121</td><td style = \"text-align: right;\">997</td><td style = \"text-align: right;\">-1.64881</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93998</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">7.17447</td><td style = \"text-align: right;\">998</td><td style = \"text-align: right;\">0.645287</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">93999</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">7.58398</td><td style = \"text-align: right;\">999</td><td style = \"text-align: right;\">-0.0317194</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">94000</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: right;\">5.13197</td><td style = \"text-align: right;\">1000</td><td style = \"text-align: right;\">1.23878</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n\n\n\n\n\nJoin all dataframes into one:\n\n\n\n\n\n::: {#34 .cell execution_count=1}\n``` {.julia .cell-code}\n\ndf1 = unique(@select data_prod :market_id :product_id)\ndf2 = unique(@select data_demo :ind_id)\n\n# Cross join to mimic expand_grid\nmain_data = crossjoin(df1, df2)\n\nleftjoin!(main_data, data_prod; on=[:market_id, :product_id])\nleftjoin!(main_data, data_demo; on=[:market_id, :ind_id])\n\nmain_data\n\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><div style = \"float: left;\"><span>2256000×15 DataFrame</span></div><div style = \"float: right;\"><span style = \"font-style: italic;\">2255975 rows omitted</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">market_id</th><th style = \"text-align: left;\">product_id</th><th style = \"text-align: left;\">ind_id</th><th style = \"text-align: left;\">mushy_x1</th><th style = \"text-align: left;\">servings_sold</th><th style = \"text-align: left;\">city_population</th><th style = \"text-align: left;\">price_x0</th><th style = \"text-align: left;\">price_instrument_z0</th><th style = \"text-align: left;\">market_size</th><th style = \"text-align: left;\">s_obs</th><th style = \"text-align: left;\">s_out</th><th style = \"text-align: left;\">logit_delta</th><th style = \"text-align: left;\">new_prices</th><th style = \"text-align: left;\">log_income_y0</th><th style = \"text-align: left;\">node_y1</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Union{Missing, Int64}\" style = \"text-align: left;\">Int64?</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Union{Missing, Int64}\" style = \"text-align: left;\">Int64?</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Union{Missing, Int64}\" style = \"text-align: left;\">Int64?</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B04</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">5.76945e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0720879</td><td style = \"text-align: right;\">0.0354837</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0124172</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.80029</td><td style = \"text-align: right;\">0.036044</td><td style = \"text-align: right;\">8.39605</td><td style = \"text-align: right;\">0.808288</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B04</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">5.76945e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0720879</td><td style = \"text-align: right;\">0.0354837</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0124172</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.80029</td><td style = \"text-align: right;\">0.036044</td><td style = \"text-align: right;\">7.76281</td><td style = \"text-align: right;\">-1.12207</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B04</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">5.76945e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0720879</td><td style = \"text-align: right;\">0.0354837</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0124172</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.80029</td><td style = \"text-align: right;\">0.036044</td><td style = \"text-align: right;\">7.75411</td><td style = \"text-align: right;\">-1.10464</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B04</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">5.76945e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0720879</td><td style = \"text-align: right;\">0.0354837</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0124172</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.80029</td><td style = \"text-align: right;\">0.036044</td><td style = \"text-align: right;\">9.09651</td><td style = \"text-align: right;\">-0.416993</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B04</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">5.76945e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0720879</td><td style = \"text-align: right;\">0.0354837</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0124172</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.80029</td><td style = \"text-align: right;\">0.036044</td><td style = \"text-align: right;\">9.09651</td><td style = \"text-align: right;\">0.287588</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B04</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">5.76945e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0720879</td><td style = \"text-align: right;\">0.0354837</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0124172</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.80029</td><td style = \"text-align: right;\">0.036044</td><td style = \"text-align: right;\">7.75411</td><td style = \"text-align: right;\">0.229819</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B04</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">5.76945e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0720879</td><td style = \"text-align: right;\">0.0354837</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0124172</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.80029</td><td style = \"text-align: right;\">0.036044</td><td style = \"text-align: right;\">8.29923</td><td style = \"text-align: right;\">-0.421769</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B04</td><td style = \"text-align: right;\">8</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">5.76945e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0720879</td><td style = \"text-align: right;\">0.0354837</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0124172</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.80029</td><td style = \"text-align: right;\">0.036044</td><td style = \"text-align: right;\">8.40662</td><td style = \"text-align: right;\">-1.35559</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B04</td><td style = \"text-align: right;\">9</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">5.76945e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0720879</td><td style = \"text-align: right;\">0.0354837</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0124172</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.80029</td><td style = \"text-align: right;\">0.036044</td><td style = \"text-align: right;\">8.47015</td><td style = \"text-align: right;\">0.0694591</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B04</td><td style = \"text-align: right;\">10</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">5.76945e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0720879</td><td style = \"text-align: right;\">0.0354837</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0124172</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.80029</td><td style = \"text-align: right;\">0.036044</td><td style = \"text-align: right;\">8.1857</td><td style = \"text-align: right;\">-0.117323</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">11</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B04</td><td style = \"text-align: right;\">11</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">5.76945e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0720879</td><td style = \"text-align: right;\">0.0354837</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0124172</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.80029</td><td style = \"text-align: right;\">0.036044</td><td style = \"text-align: right;\">7.77479</td><td style = \"text-align: right;\">1.21928</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">12</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B04</td><td style = \"text-align: right;\">12</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">5.76945e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0720879</td><td style = \"text-align: right;\">0.0354837</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0124172</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.80029</td><td style = \"text-align: right;\">0.036044</td><td style = \"text-align: right;\">7.76281</td><td style = \"text-align: right;\">0.292914</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">13</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B04</td><td style = \"text-align: right;\">13</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">5.76945e5</td><td style = \"text-align: right;\">516259</td><td style = \"text-align: right;\">0.0720879</td><td style = \"text-align: right;\">0.0354837</td><td style = \"text-align: right;\">46463310</td><td style = \"text-align: right;\">0.0124172</td><td style = \"text-align: right;\">0.555225</td><td style = \"text-align: right;\">-3.80029</td><td style = \"text-align: right;\">0.036044</td><td style = \"text-align: right;\">9.09651</td><td style = \"text-align: right;\">-0.0311481</td></tr><tr><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2255989</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F6B18</td><td style = \"text-align: right;\">989</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">4.43638e5</td><td style = \"text-align: right;\">188082</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">0.0815838</td><td style = \"text-align: right;\">16927380</td><td style = \"text-align: right;\">0.0262083</td><td style = \"text-align: right;\">0.642477</td><td style = \"text-align: right;\">-3.19925</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">8.46581</td><td style = \"text-align: right;\">1.45184</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2255990</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F6B18</td><td style = \"text-align: right;\">990</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">4.43638e5</td><td style = \"text-align: right;\">188082</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">0.0815838</td><td style = \"text-align: right;\">16927380</td><td style = \"text-align: right;\">0.0262083</td><td style = \"text-align: right;\">0.642477</td><td style = \"text-align: right;\">-3.19925</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">7.4559</td><td style = \"text-align: right;\">-0.873824</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2255991</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F6B18</td><td style = \"text-align: right;\">991</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">4.43638e5</td><td style = \"text-align: right;\">188082</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">0.0815838</td><td style = \"text-align: right;\">16927380</td><td style = \"text-align: right;\">0.0262083</td><td style = \"text-align: right;\">0.642477</td><td style = \"text-align: right;\">-3.19925</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">8.68641</td><td style = \"text-align: right;\">0.534542</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2255992</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F6B18</td><td style = \"text-align: right;\">992</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">4.43638e5</td><td style = \"text-align: right;\">188082</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">0.0815838</td><td style = \"text-align: right;\">16927380</td><td style = \"text-align: right;\">0.0262083</td><td style = \"text-align: right;\">0.642477</td><td style = \"text-align: right;\">-3.19925</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">7.5741</td><td style = \"text-align: right;\">0.487625</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2255993</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F6B18</td><td style = \"text-align: right;\">993</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">4.43638e5</td><td style = \"text-align: right;\">188082</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">0.0815838</td><td style = \"text-align: right;\">16927380</td><td style = \"text-align: right;\">0.0262083</td><td style = \"text-align: right;\">0.642477</td><td style = \"text-align: right;\">-3.19925</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">7.91547</td><td style = \"text-align: right;\">-1.12754</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2255994</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F6B18</td><td style = \"text-align: right;\">994</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">4.43638e5</td><td style = \"text-align: right;\">188082</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">0.0815838</td><td style = \"text-align: right;\">16927380</td><td style = \"text-align: right;\">0.0262083</td><td style = \"text-align: right;\">0.642477</td><td style = \"text-align: right;\">-3.19925</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">8.98306</td><td style = \"text-align: right;\">0.991109</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2255995</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F6B18</td><td style = \"text-align: right;\">995</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">4.43638e5</td><td style = \"text-align: right;\">188082</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">0.0815838</td><td style = \"text-align: right;\">16927380</td><td style = \"text-align: right;\">0.0262083</td><td style = \"text-align: right;\">0.642477</td><td style = \"text-align: right;\">-3.19925</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">8.45945</td><td style = \"text-align: right;\">-0.112785</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2255996</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F6B18</td><td style = \"text-align: right;\">996</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">4.43638e5</td><td style = \"text-align: right;\">188082</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">0.0815838</td><td style = \"text-align: right;\">16927380</td><td style = \"text-align: right;\">0.0262083</td><td style = \"text-align: right;\">0.642477</td><td style = \"text-align: right;\">-3.19925</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">8.95375</td><td style = \"text-align: right;\">-1.30939</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2255997</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F6B18</td><td style = \"text-align: right;\">997</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">4.43638e5</td><td style = \"text-align: right;\">188082</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">0.0815838</td><td style = \"text-align: right;\">16927380</td><td style = \"text-align: right;\">0.0262083</td><td style = \"text-align: right;\">0.642477</td><td style = \"text-align: right;\">-3.19925</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">7.80121</td><td style = \"text-align: right;\">-1.64881</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2255998</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F6B18</td><td style = \"text-align: right;\">998</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">4.43638e5</td><td style = \"text-align: right;\">188082</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">0.0815838</td><td style = \"text-align: right;\">16927380</td><td style = \"text-align: right;\">0.0262083</td><td style = \"text-align: right;\">0.642477</td><td style = \"text-align: right;\">-3.19925</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">7.17447</td><td style = \"text-align: right;\">0.645287</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2255999</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F6B18</td><td style = \"text-align: right;\">999</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">4.43638e5</td><td style = \"text-align: right;\">188082</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">0.0815838</td><td style = \"text-align: right;\">16927380</td><td style = \"text-align: right;\">0.0262083</td><td style = \"text-align: right;\">0.642477</td><td style = \"text-align: right;\">-3.19925</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">7.58398</td><td style = \"text-align: right;\">-0.0317194</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2256000</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F6B18</td><td style = \"text-align: right;\">1000</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">4.43638e5</td><td style = \"text-align: right;\">188082</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">0.0815838</td><td style = \"text-align: right;\">16927380</td><td style = \"text-align: right;\">0.0262083</td><td style = \"text-align: right;\">0.642477</td><td style = \"text-align: right;\">-3.19925</td><td style = \"text-align: right;\">0.127557</td><td style = \"text-align: right;\">5.13197</td><td style = \"text-align: right;\">1.23878</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n\n\n\n\n\nNow let's start construcing BLP estimation algorithm! First we will construct functions that calculate predicted market share and perform contraction mapping to get $\\delta$ when given $\\Pi$, $\\Sigma$:\n\n\n\n\n\n::: {#36 .cell execution_count=1}\n``` {.julia .cell-code}\n# pi: 2x1\n# sigma: 2x1\n# delta should be jt variable\n \nfunction calc_mkt_share(df, delta, pi, sigma)\n  df = leftjoin(df, delta; on=[:market_id, :product_id])\n\n  data = @rtransform df :util = exp(:d + :price_x0 * sigma[1] * :node_y1 + :mushy_x1 * sigma[2] * :node_y1 + :price_x0 * pi[1] * :log_income_y0 + :mushy_x1 * pi[2] * :log_income_y0)\n\n  gdp = groupby(data, [:market_id, :ind_id])\n  data = @transform gdp :util_it = exp.(:util) ./ (sum(exp.(:util)) + 1)\n\n  gdp = groupby(data, [:market_id, :product_id])\n  data = @combine gdp :pred_sh_jt = sum(:util_it .* (1/1000))\nend\n\n  delta_fp = unique(df, [:market_id, :product_id])\n  @select! delta_fp :market_id :product_id\n  @rtransform! delta_fp :d = 0\ncalc_mkt_share(main_data, delta_fp, [1,1], [1,1])\n\n# #d0 should be jt variable\n# function contraction_map(df, d0, pi, sigma, tol = 1e-5, maxiter = 1e5)\n#   obs_mkt_share = unique(df, [:market_id, :product_id])\n#   @select! obs_mkt_share :market_id :product_id :s_obs\n#   d_old = copy(d0)\n#   normdiff = Inf\n#   iter = 0\n#   while normdiff > tol && iter <= maxiter\n#     model_mkt_share = calc_mkt_share(df, d_old, pi, sigma)\n#     df_sh = @select df :market_id :product_id :s_obs\n#     model_mkt_share = leftjoin(model_mkt_share, df_sh, on=[:market_id, :product_id])\n\n#     d_new = leftjoin(d_old, model_mkt_share; on= [:market_id, :product_id]) \n#     d_new = @rtransform d_new :d_iter = :d + log(:s_obs) - log(:pred_sh_jt)\n\n#     normdiff = maximum(abs.(d_new.d_iter .- d_new.d))\n\n#     # normdiff = maximum(norm.(d_new.d_iter .- d_new.d))\n#     d_old = @select d_new begin\n#       :market_id\n#       :product_id\n#       :d = :d_iter \n#     end \n#     iter += 1\n#   end\n#   return d_old\n# end\n\n# function calc_delta(df, pi, sigma)\n#   delta_fp = unique(df, [:market_id, :product_id])\n#   @select! delta_fp :market_id :product_id\n#   @rtransform! delta_fp :d = 0\n\n#   delta_jt = contraction_map(df, delta_fp, pi, sigma)\n\n#   return delta_jt\n# end\n\n# @time delta_res = calc_delta(main_data, [1, 1], [1, 1])\n# mean(delta_res)\n\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><div style = \"float: left;\"><span>2256×3 DataFrame</span></div><div style = \"float: right;\"><span style = \"font-style: italic;\">2231 rows omitted</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">market_id</th><th style = \"text-align: left;\">product_id</th><th style = \"text-align: left;\">pred_sh_jt</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B04</td><td style = \"text-align: right;\">NaN</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B06</td><td style = \"text-align: right;\">NaN</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B07</td><td style = \"text-align: right;\">NaN</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B09</td><td style = \"text-align: right;\">2.00559e-55</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B11</td><td style = \"text-align: right;\">2.39821e-55</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B13</td><td style = \"text-align: right;\">2.10254e-55</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B17</td><td style = \"text-align: right;\">NaN</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B30</td><td style = \"text-align: right;\">1.97595e-55</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F1B45</td><td style = \"text-align: right;\">2.30514e-55</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F2B05</td><td style = \"text-align: right;\">1.73479e-55</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">11</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F2B08</td><td style = \"text-align: right;\">2.03294e-55</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">12</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F2B15</td><td style = \"text-align: right;\">NaN</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">13</td><td style = \"text-align: left;\">C01Q1</td><td style = \"text-align: left;\">F2B16</td><td style = \"text-align: right;\">NaN</td></tr><tr><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2245</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F2B16</td><td style = \"text-align: right;\">NaN</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2246</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F2B19</td><td style = \"text-align: right;\">2.79288e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2247</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F2B26</td><td style = \"text-align: right;\">2.61091e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2248</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F2B28</td><td style = \"text-align: right;\">NaN</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2249</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F2B40</td><td style = \"text-align: right;\">2.79267e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2250</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F2B48</td><td style = \"text-align: right;\">2.64727e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2251</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F3B06</td><td style = \"text-align: right;\">NaN</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2252</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F3B14</td><td style = \"text-align: right;\">2.64427e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2253</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F4B02</td><td style = \"text-align: right;\">3.01899e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2254</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F4B10</td><td style = \"text-align: right;\">2.69486e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2255</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F4B12</td><td style = \"text-align: right;\">2.53109e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2256</td><td style = \"text-align: left;\">C65Q2</td><td style = \"text-align: left;\">F6B18</td><td style = \"text-align: right;\">2.65098e-6</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n\n\n\n\n\n## My BLP.jl (standing on the shoulders of giants)\n\nOkay, my previous works failed miserably. This is probably because it is hard to do the matrix complication in terms of the dataframe-dplyr style in R. But then again, maybe it is just because I did not do a good job. Thus I will try to write up a code following others while trying to use `DataFramesMeta` syntax whenever it is doable for transparency.\n\nBut this will take a lot of work. I will periodically come back to update my BLP. In the meantime, enjoy your life!\n\n## References {.unnumbered}\n\n::: {#refs}\n:::\n\n",
    "supporting": [
      "blp_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}